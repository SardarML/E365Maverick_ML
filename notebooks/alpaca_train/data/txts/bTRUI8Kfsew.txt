[00:00:00 -> 00:00:01]  Hello world, Noah here.
[00:00:01 -> 00:00:03]  Welcome to part two of my retrospective
[00:00:03 -> 00:00:05]  on my 10-year programming journey.
[00:00:05 -> 00:00:07]  If you haven't already seen part one,
[00:00:07 -> 00:00:08]  you should watch it first.
[00:00:08 -> 00:00:10]  Otherwise, let's pick up where we left off
[00:00:10 -> 00:00:12]  right after my high school graduation.
[00:00:12 -> 00:00:18]  ♪♪
[00:00:18 -> 00:00:19]  Before I talk about my college experience,
[00:00:19 -> 00:00:21]  I want to talk briefly about the difference
[00:00:21 -> 00:00:24]  between computer science and programming
[00:00:24 -> 00:00:26]  because the distinction is important.
[00:00:26 -> 00:00:28]  Programming is the act of writing code,
[00:00:28 -> 00:00:30]  but computer science deals with the ideas,
[00:00:30 -> 00:00:32]  theories, and proofs that underpin the field.
[00:00:32 -> 00:00:34]  It's one thing to be able to write a program,
[00:00:34 -> 00:00:36]  but it's another thing entirely to prove
[00:00:36 -> 00:00:38]  that a computer can run that program
[00:00:38 -> 00:00:40]  or to discuss in mathematical terms
[00:00:40 -> 00:00:41]  how long the program takes to run
[00:00:41 -> 00:00:43]  as a function of the size of its input.
[00:00:43 -> 00:00:46]  Some of my classes, like operating systems,
[00:00:46 -> 00:00:47]  did involve programming,
[00:00:47 -> 00:00:49]  but the focus was still on understanding
[00:00:49 -> 00:00:51]  the underlying concepts,
[00:00:51 -> 00:00:52]  and oftentimes this was harder
[00:00:52 -> 00:00:54]  than actually writing the code.
[00:00:54 -> 00:00:56]  Some classes, like theory of computation,
[00:00:56 -> 00:00:57]  didn't involve any code at all,
[00:00:57 -> 00:01:01]  and instead focused entirely on proofs, theory, and logic.
[00:01:01 -> 00:01:03]  In my day-to-day work as a software engineer,
[00:01:03 -> 00:01:05]  very little of what I learned in college
[00:01:05 -> 00:01:06]  is directly applicable,
[00:01:06 -> 00:01:09]  and I could probably still do my job just fine
[00:01:09 -> 00:01:11]  if I hadn't gone to college.
[00:01:11 -> 00:01:13]  However, college did teach me how to think,
[00:01:13 -> 00:01:15]  how to approach a problem,
[00:01:15 -> 00:01:17]  understand it, and begin to solve it.
[00:01:17 -> 00:01:19]  It gave me a look at many different areas of computing
[00:01:19 -> 00:01:22]  so that I could see what I did and didn't like,
[00:01:22 -> 00:01:24]  and every so often, something I learned in a class
[00:01:24 -> 00:01:27]  is directly applicable to a problem or discussion.
[00:01:27 -> 00:01:28]  So overall, I'd say that college
[00:01:28 -> 00:01:30]  was absolutely worth it for me,
[00:01:30 -> 00:01:32]  but if you're looking to study computer science,
[00:01:32 -> 00:01:34]  it may not be what you expect,
[00:01:34 -> 00:01:36]  but I'm getting a bit ahead of myself here.
[00:01:36 -> 00:01:38]  I did a lot during my three-and-a-half-year undergrad
[00:01:38 -> 00:01:39]  at Penn State.
[00:01:39 -> 00:01:41]  In my freshman year, I worked as a freelancer
[00:01:41 -> 00:01:43]  and built an app for a company.
[00:01:43 -> 00:01:46]  I also continued to compete in programming competitions,
[00:01:46 -> 00:01:48]  and I even went to the International Collegiate
[00:01:48 -> 00:01:50]  Programming Contest, ICPC.
[00:01:50 -> 00:01:52]  I did not do very well.
[00:01:52 -> 00:01:54]  In addition to programming competitions,
[00:01:54 -> 00:01:56]  I also competed in hackathons.
[00:01:56 -> 00:01:58]  If you don't know, a hackathon is an event
[00:01:58 -> 00:02:00]  where teams work under a tight deadline
[00:02:00 -> 00:02:01]  to build a project from scratch.
[00:02:01 -> 00:02:03]  It's a great opportunity to work with friends
[00:02:03 -> 00:02:06]  and a great excuse to start a new project.
[00:02:06 -> 00:02:08]  Hackathons typically take place on weekends
[00:02:08 -> 00:02:10]  so that competitors can go all out
[00:02:10 -> 00:02:12]  and pour hours into their projects.
[00:02:12 -> 00:02:14]  My favorite project was a code translator.
[00:02:14 -> 00:02:16]  You could input code in one language,
[00:02:16 -> 00:02:17]  and it would be translated first
[00:02:17 -> 00:02:19]  into an intermediate representation,
[00:02:19 -> 00:02:21]  and then into code in the target language.
[00:02:21 -> 00:02:23]  We pulled an all-nighter to get a working demo
[00:02:23 -> 00:02:26]  with a couple of languages and basic translation,
[00:02:26 -> 00:02:27]  and although we didn't place,
[00:02:27 -> 00:02:29]  it was a lot of fun and I learned a lot.
[00:02:29 -> 00:02:31]  In general, I've found that when I have an idea
[00:02:31 -> 00:02:34]  for a new project, I'm very excited at first
[00:02:34 -> 00:02:36]  and often can't stop thinking about it.
[00:02:36 -> 00:02:38]  However, once enough time passes,
[00:02:38 -> 00:02:40]  whether I've actually worked on the project or not,
[00:02:40 -> 00:02:42]  I'll often start to lose motivation.
[00:02:42 -> 00:02:44]  I've adopted the general strategy
[00:02:44 -> 00:02:45]  that if a good idea comes to me
[00:02:45 -> 00:02:47]  and I know I want to work on it,
[00:02:47 -> 00:02:49]  I should try and get as much work done
[00:02:49 -> 00:02:50]  as quickly as possible,
[00:02:50 -> 00:02:52]  so that by the time I lose my initial motivation,
[00:02:52 -> 00:02:56]  I've either put in enough effort to be willing to give up
[00:02:56 -> 00:02:58]  or I've gotten enough additional motivation
[00:02:58 -> 00:03:01]  to be excited to continue to work on the project.
[00:03:01 -> 00:03:02]  So here's another piece of advice.
[00:03:02 -> 00:03:03]  Find something that will give you
[00:03:03 -> 00:03:05]  frequent incremental motivation.
[00:03:05 -> 00:03:07]  Once I get that initial burst of work done
[00:03:07 -> 00:03:08]  and I have a prototype,
[00:03:08 -> 00:03:11]  I'm usually motivated to continue working,
[00:03:11 -> 00:03:14]  and as I refine the prototype and add new features,
[00:03:14 -> 00:03:17]  I get further motivation from seeing the project develop.
[00:03:17 -> 00:03:19]  I also worked for a few semesters as a teaching assistant
[00:03:19 -> 00:03:21]  in the computer science department.
[00:03:21 -> 00:03:23]  I held recitations where I reinforced concepts
[00:03:23 -> 00:03:24]  that were taught in class
[00:03:24 -> 00:03:26]  and helped students understand
[00:03:26 -> 00:03:27]  and complete their assignments.
[00:03:27 -> 00:03:29]  I even sometimes did one-on-one sessions
[00:03:29 -> 00:03:31]  with students upon request.
[00:03:31 -> 00:03:32]  In these sessions,
[00:03:32 -> 00:03:34]  I was able to provide personalized lessons,
[00:03:34 -> 00:03:36]  answer any and all questions that the student had,
[00:03:36 -> 00:03:38]  and ensure that they truly understood
[00:03:38 -> 00:03:39]  what they were learning.
[00:03:39 -> 00:03:41]  Much like when I worked as a teaching assistant
[00:03:41 -> 00:03:43]  in my senior year of high school,
[00:03:43 -> 00:03:45]  this was a great opportunity to continue teaching.
[00:03:45 -> 00:03:47]  It even inspired a short-lived series
[00:03:47 -> 00:03:50]  on my YouTube channel called CS University,
[00:03:50 -> 00:03:51]  which I made partially as a resource
[00:03:51 -> 00:03:54]  for students taking the programming fundamentals class
[00:03:54 -> 00:03:55]  for which I was a TA.
[00:03:55 -> 00:03:57]  Since I'm talking about my college years,
[00:03:57 -> 00:03:59]  I should talk about some of the classes I took.
[00:03:59 -> 00:04:02]  My favorite class was probably Comp Sci 311,
[00:04:02 -> 00:04:04]  Introduction to Systems Programming.
[00:04:04 -> 00:04:06]  In this class, we learned low-level C programming
[00:04:06 -> 00:04:09]  and even touched on some assembly.
[00:04:09 -> 00:04:10]  I really enjoyed this class
[00:04:10 -> 00:04:12]  because I hadn't had much experience
[00:04:12 -> 00:04:14]  with these areas of programming beforehand,
[00:04:14 -> 00:04:15]  so I learned a lot.
[00:04:15 -> 00:04:17]  The low-level programming I did in this class
[00:04:17 -> 00:04:18]  was actually quite different
[00:04:18 -> 00:04:20]  from the high-level programming I was used to.
[00:04:20 -> 00:04:22]  There was a whole different set of considerations
[00:04:22 -> 00:04:23]  that I had to worry about.
[00:04:23 -> 00:04:26]  I was no longer dealing with object-oriented programming,
[00:04:26 -> 00:04:28]  async await, and multithreading,
[00:04:28 -> 00:04:31]  but I did have to worry about managing my own memory,
[00:04:31 -> 00:04:33]  making sure that my strings were null-terminated,
[00:04:33 -> 00:04:34]  and avoiding segfaults.
[00:04:34 -> 00:04:37]  My favorite project in that course was Bomb Lab.
[00:04:37 -> 00:04:39]  You were given an executable, the bomb,
[00:04:39 -> 00:04:41]  and you had to figure out the passwords
[00:04:41 -> 00:04:43]  that would disarm each stage.
[00:04:43 -> 00:04:44]  The bomb executable had to be run
[00:04:44 -> 00:04:46]  on the school's lab machines,
[00:04:46 -> 00:04:48]  and every time you entered a wrong password,
[00:04:48 -> 00:04:50]  the bomb would notify a server
[00:04:50 -> 00:04:52]  and you would lose half a point from your final grade.
[00:04:52 -> 00:04:53]  The only way to disarm the bomb
[00:04:53 -> 00:04:56]  was to step through the instructions with the debugger,
[00:04:56 -> 00:04:58]  understand what the assembly code was doing,
[00:04:58 -> 00:04:59]  and reverse-engineer the passwords
[00:04:59 -> 00:05:01]  that the code was looking for.
[00:05:01 -> 00:05:03]  The first thing I did was get the bomb executable
[00:05:03 -> 00:05:05]  to run inside of a virtual machine
[00:05:05 -> 00:05:06]  that was disconnected from the internet,
[00:05:06 -> 00:05:09]  so I wouldn't have to worry about losing points.
[00:05:09 -> 00:05:11]  This ended up taking a significant amount of time,
[00:05:11 -> 00:05:13]  and it probably wasn't worth it in the end,
[00:05:13 -> 00:05:16]  but I was proud of myself for figuring it out.
[00:05:16 -> 00:05:17]  I confirmed with the professor,
[00:05:17 -> 00:05:20]  who said that I was allowed to run the bomb in my VM,
[00:05:20 -> 00:05:22]  since I had figured out how to make it work
[00:05:23 -> 00:05:24]  This process took so long
[00:05:24 -> 00:05:25]  that I didn't have much time
[00:05:25 -> 00:05:28]  to actually do the project before the deadline,
[00:05:28 -> 00:05:29]  so I worked hard for a few days
[00:05:29 -> 00:05:31]  figuring out how to solve the bomb
[00:05:31 -> 00:05:34]  and writing up my process to submit along with my answers.
[00:05:34 -> 00:05:36]  Overall, I learned a lot about assembly code
[00:05:36 -> 00:05:37]  from this project,
[00:05:37 -> 00:05:39]  and I felt like I had truly solved a mystery.
[00:05:39 -> 00:05:41]  I also did research during my undergrad.
[00:05:41 -> 00:05:43]  I was in the Schreyer Honors College,
[00:05:43 -> 00:05:46]  and one of the requirements was to write an honors thesis.
[00:05:46 -> 00:05:48]  I did research with a professor
[00:05:48 -> 00:05:50]  in the field of natural language processing,
[00:05:50 -> 00:05:52]  which is concerned with how computers
[00:05:52 -> 00:05:55]  can understand and interact with human language.
[00:05:55 -> 00:05:56]  I did experiments on an algorithm
[00:05:56 -> 00:05:58]  that was developed in our lab
[00:05:58 -> 00:06:00]  that attempted to automatically grade summaries
[00:06:00 -> 00:06:03]  written by students for school assignments.
[00:06:03 -> 00:06:05]  The algorithm basically worked like this.
[00:06:05 -> 00:06:07]  First, a few experts would write summaries
[00:06:07 -> 00:06:11]  that we know are good, which we call golden summaries.
[00:06:11 -> 00:06:13]  Then, using software built in our lab,
[00:06:13 -> 00:06:16]  someone would break down each golden summary into fragments
[00:06:16 -> 00:06:18]  called summary content units,
[00:06:18 -> 00:06:21]  where each SCU expressed a single idea.
[00:06:21 -> 00:06:24]  Then, they would link SCUs from different golden summaries
[00:06:24 -> 00:06:26]  that express the same idea.
[00:06:26 -> 00:06:27]  The theory is that the more summaries
[00:06:27 -> 00:06:29]  a particular idea appears in,
[00:06:29 -> 00:06:31]  the more important that idea is.
[00:06:31 -> 00:06:33]  Then, to grade student-written summaries,
[00:06:33 -> 00:06:36]  our algorithm would break the summaries down into SCUs,
[00:06:36 -> 00:06:39]  compare the student SCUs to the golden SCUs,
[00:06:39 -> 00:06:41]  and score the summary.
[00:06:41 -> 00:06:42]  I experimented with changing parameters
[00:06:42 -> 00:06:44]  and using different models to encode words,
[00:06:44 -> 00:06:46]  among other things.
[00:06:46 -> 00:06:48]  Overall, I personally found research
[00:06:48 -> 00:06:50]  to not be as enjoyable as programming,
[00:06:50 -> 00:06:52]  but I learned a lot about NLP
[00:06:52 -> 00:06:54]  and further developed my interest in the field.
[00:06:54 -> 00:06:55]  This led me to take a class
[00:06:55 -> 00:06:59]  that was run by the lab's professor, which I enjoyed a lot.
[00:06:59 -> 00:07:02]  And I also got to write a thesis, which is pretty cool.
[00:07:02 -> 00:07:04]  I also did a few internships.
[00:07:04 -> 00:07:06]  In the summer between high school and college,
[00:07:06 -> 00:07:09]  I worked at Lockheed Martin for about a month.
[00:07:09 -> 00:07:10]  I worked on some internal websites
[00:07:10 -> 00:07:12]  that are probably long since gone,
[00:07:12 -> 00:07:15]  and the internship wasn't particularly exciting,
[00:07:15 -> 00:07:17]  but it was a good first experience.
[00:07:17 -> 00:07:19]  In the summer after freshman year,
[00:07:19 -> 00:07:21]  I worked at a small fintech company in Delaware.
[00:07:21 -> 00:07:24]  This was my first real experience of working on a team
[00:07:24 -> 00:07:25]  and delivering a product.
[00:07:25 -> 00:07:28]  I mostly worked on a new version of their customer portal,
[00:07:28 -> 00:07:31]  and I also worked on some internal tools.
[00:07:31 -> 00:07:33]  I even got to give a presentation on Kotlin
[00:07:33 -> 00:07:36]  to a local bootcamp that sends some graduates
[00:07:36 -> 00:07:37]  to the company.
[00:07:37 -> 00:07:39]  But the big one happened in the summer of 2019,
[00:07:39 -> 00:07:41]  after my sophomore year.
[00:07:41 -> 00:07:43]  Google reached out in 2018,
[00:07:43 -> 00:07:46]  and I went through the intern interview process.
[00:07:46 -> 00:07:47]  I found out in March of 2019
[00:07:47 -> 00:07:49]  that I had cleared the hiring committee.
[00:07:49 -> 00:07:52]  Now I just had to wait for a team match.
[00:07:52 -> 00:07:54]  Google's hiring process is a bit weird,
[00:07:54 -> 00:07:56]  and it's the same for interns and full-time.
[00:07:56 -> 00:07:58]  In most cases, including mine,
[00:07:58 -> 00:08:01]  you're interviewed as a generalist software engineer.
[00:08:01 -> 00:08:03]  If you pass the hiring committee,
[00:08:03 -> 00:08:04]  it means that Google deems you good enough
[00:08:04 -> 00:08:06]  to work on most teams,
[00:08:06 -> 00:08:09]  but then you enter the team matching stage.
[00:08:09 -> 00:08:11]  Hiring managers are able to see your information,
[00:08:11 -> 00:08:13]  and if they think that you might be a good fit for the team,
[00:08:13 -> 00:08:14]  they'll schedule a call.
[00:08:14 -> 00:08:17]  If the call goes well and both sides are interested,
[00:08:17 -> 00:08:18]  the match is made.
[00:08:18 -> 00:08:20]  But some people never get that call.
[00:08:20 -> 00:08:23]  That means that Google deemed them good enough,
[00:08:23 -> 00:08:25]  but there just wasn't a spot open for them.
[00:08:25 -> 00:08:28]  It's pretty heartbreaking to make it that far,
[00:08:28 -> 00:08:31]  to pass the interview, but not get the job.
[00:08:31 -> 00:08:33]  And that's where I was in April of 2019.
[00:08:33 -> 00:08:36]  I had been in team matching for a few months
[00:08:36 -> 00:08:37]  and hadn't heard anything back.
[00:08:37 -> 00:08:40]  School was going to be ending in a couple of weeks.
[00:08:40 -> 00:08:42]  I had another internship lined up
[00:08:42 -> 00:08:44]  at a small company in Ohio.
[00:08:44 -> 00:08:46]  It was cool, but it was no Google.
[00:08:46 -> 00:08:49]  And then in late April, I got an email.
[00:08:49 -> 00:08:51]  There was a team that wanted to talk to me.
[00:08:51 -> 00:08:54]  The call was scheduled for the next day, and it went well.
[00:08:54 -> 00:08:58]  A day or two later, the match was made, and it was official.
[00:08:58 -> 00:09:01]  I was going to Google in just a couple of weeks.
[00:09:01 -> 00:09:04]  My 2019 internship was an incredible experience.
[00:09:04 -> 00:09:06]  I worked on an internal analytics tool
[00:09:06 -> 00:09:08]  for Google's first-party mobile apps.
[00:09:08 -> 00:09:09]  My office was in Sunnyvale,
[00:09:09 -> 00:09:12]  and I lived in San Jose and biked to work every day.
[00:09:12 -> 00:09:14]  I learned a lot about being a software engineer,
[00:09:14 -> 00:09:17]  more on that later, and made some friends,
[00:09:17 -> 00:09:19]  two of whom are my current roommates.
[00:09:19 -> 00:09:22]  I interned again in the summer of 2020.
[00:09:22 -> 00:09:25]  Of course, due to that thing that happened in 2020,
[00:09:25 -> 00:09:27]  the internship was remote.
[00:09:27 -> 00:09:30]  I was bummed to not be in person in California,
[00:09:30 -> 00:09:32]  especially since my new team was in Mountain View,
[00:09:32 -> 00:09:35]  but the remote internship was still a good experience.
[00:09:35 -> 00:09:37]  I worked on the AdWords conversion tracking team.
[00:09:37 -> 00:09:39]  The team uses the Dart language,
[00:09:40 -> 00:09:42]  which was created at Google for its front-end web code,
[00:09:42 -> 00:09:43]  so I learned it.
[00:09:43 -> 00:09:46]  It's my most used language of the past couple years,
[00:09:46 -> 00:09:48]  so it was definitely a worthy investment.
[00:09:48 -> 00:09:50]  In order to help myself learn Dart,
[00:09:50 -> 00:09:51]  I decided to take my own advice
[00:09:51 -> 00:09:54]  about finding different ways to apply the skills I have.
[00:09:54 -> 00:09:56]  Shortly before my internship began,
[00:09:56 -> 00:09:58]  I started working on an app in Flutter,
[00:09:58 -> 00:10:00]  a mobile app framework built by Google
[00:10:00 -> 00:10:03]  that uses Dart as its language of choice.
[00:10:03 -> 00:10:04]  For the past five years,
[00:10:04 -> 00:10:06]  I've used a service called Last.fm
[00:10:06 -> 00:10:08]  to track my music listening habits.
[00:10:08 -> 00:10:10]  You can track every time you listen to a song
[00:10:10 -> 00:10:12]  and then see detailed statistics
[00:10:12 -> 00:10:14]  about your top artists, albums, and tracks.
[00:10:14 -> 00:10:17]  Last.fm does have a mobile app, but it's quite limited.
[00:10:17 -> 00:10:19]  Most importantly, it doesn't allow you
[00:10:19 -> 00:10:23]  to manually scrabble or track your music.
[00:10:23 -> 00:10:25]  I also wanted a Shazam-like feature
[00:10:25 -> 00:10:27]  that would recognize the song that was playing around me
[00:10:27 -> 00:10:28]  and then scrabble it,
[00:10:28 -> 00:10:31]  so I set about building my own Last.fm client,
[00:10:31 -> 00:10:32]  which I called Finale.
[00:10:32 -> 00:10:35]  I built a basic version that could fetch some stats,
[00:10:35 -> 00:10:37]  and then I integrated a third-party framework
[00:10:37 -> 00:10:40]  called ACR Cloud to do the music recognition.
[00:10:40 -> 00:10:42]  At this point, I had a custom app
[00:10:42 -> 00:10:43]  that was genuinely useful to me
[00:10:43 -> 00:10:47]  and that, as far as I knew, didn't exist anywhere else.
[00:10:47 -> 00:10:49]  I continued to add features and refine the app
[00:10:49 -> 00:10:50]  for the next six months
[00:10:50 -> 00:10:52]  until it was a proper Last.fm client
[00:10:52 -> 00:10:54]  with a decent amount of polish.
[00:10:54 -> 00:10:55]  At that point, I figured
[00:10:55 -> 00:10:56]  that others might find the app useful,
[00:10:56 -> 00:11:00]  so I decided to publish it on the App Store and Play Store.
[00:11:00 -> 00:11:01]  To date, the app has received
[00:11:01 -> 00:11:04]  more than 40,000 downloads across both stores,
[00:11:04 -> 00:11:05]  and I've added a bunch of new features
[00:11:05 -> 00:11:07]  that were requested by users
[00:11:07 -> 00:11:10]  who reached out via email or the subreddit I set up.
[00:11:10 -> 00:11:12]  Here's a piece of advice.
[00:11:12 -> 00:11:14]  If you're launching an app or service or video series
[00:11:14 -> 00:11:17]  or anything that exists within a niche,
[00:11:17 -> 00:11:19]  find out where those people congregate online
[00:11:19 -> 00:11:20]  and market to them there.
[00:11:20 -> 00:11:23]  Chances are that you already know where these places may be.
[00:11:23 -> 00:11:26]  When I published Finale on the App Store and Play Store,
[00:11:26 -> 00:11:28]  I made a post on the Last.fm subreddit
[00:11:28 -> 00:11:30]  and got a lot of users from there.
[00:11:30 -> 00:11:32]  Some of them even suggested features
[00:11:32 -> 00:11:33]  that they wanted to see implemented,
[00:11:33 -> 00:11:35]  and when I implemented those features,
[00:11:35 -> 00:11:37]  I made update posts on the Last.fm subreddit
[00:11:37 -> 00:11:39]  to keep the app on people's minds
[00:11:39 -> 00:11:41]  and bring in a steady stream of new users.
[00:11:41 -> 00:11:43]  I also used this tactic back in the days
[00:11:43 -> 00:11:45]  when I was making Minecraft tutorials.
[00:11:45 -> 00:11:48]  I posted frequently on the bucket forums
[00:11:48 -> 00:11:50]  and even took plugin requests there.
[00:11:50 -> 00:11:52]  Even when I wasn't directly promoting my videos,
[00:11:52 -> 00:11:54]  I was making a name for myself in the community
[00:11:54 -> 00:11:56]  so that maybe someone would check out my profile
[00:11:56 -> 00:11:58]  and see my videos,
[00:11:58 -> 00:12:00]  or maybe they'd ask me how to make plugins themselves,
[00:12:00 -> 00:12:03]  and boy, do I have a great resource for them.
[00:12:03 -> 00:12:04]  So now it's December of 2020,
[00:12:05 -> 00:12:08]  and I graduate from college at home a semester early.
[00:12:08 -> 00:12:10]  I've already accepted a job at Google
[00:12:10 -> 00:12:11]  that will start in February,
[00:12:11 -> 00:12:12]  so I have some time off.
[00:12:12 -> 00:12:14]  I've been at home for almost a year,
[00:12:14 -> 00:12:15]  so I need a change,
[00:12:15 -> 00:12:17]  but the Google offices aren't open yet,
[00:12:17 -> 00:12:19]  so there's no point in moving out to California.
[00:12:19 -> 00:12:22]  My good friend and fellow YouTuber, Luke Miani,
[00:12:22 -> 00:12:23]  lives in Washington, D.C.,
[00:12:23 -> 00:12:24]  so why not move there?
[00:12:24 -> 00:12:26]  We plan to rent a shared studio space
[00:12:26 -> 00:12:28]  where Luke could make YouTube videos
[00:12:28 -> 00:12:29]  and I could do my remote job.
[00:12:29 -> 00:12:31]  So in mid-January of 2021,
[00:12:31 -> 00:12:34]  I packed up my car and drove down to D.C.
[00:12:34 -> 00:12:36]  before I even had a place to live.
[00:12:36 -> 00:12:39]  I was able to find one pretty quickly and got set up.
[00:12:39 -> 00:12:41]  My job at Google started in mid-February.
[00:12:41 -> 00:12:43]  I was working on an internal mobile app
[00:12:43 -> 00:12:46]  that the Google Ads salespeople use to manage their data.
[00:12:46 -> 00:12:47]  The app was written in Flutter,
[00:12:47 -> 00:12:50]  so my experience building Finale came in handy.
[00:12:50 -> 00:12:51]  The team was pretty small,
[00:12:51 -> 00:12:52]  which meant that I got to have ownership
[00:12:52 -> 00:12:54]  over large pieces of the app.
[00:12:54 -> 00:12:57]  I can't talk too much about exactly what I did,
[00:12:57 -> 00:12:58]  but I definitely learned a lot.
[00:12:58 -> 00:13:02]  In late 2020, Luke had purchased a lot of 50 iPhone 4s
[00:13:02 -> 00:13:04]  and 4Ss from eBay.
[00:13:04 -> 00:13:06]  His original idea was just to clean them up,
[00:13:06 -> 00:13:09]  see how many of them worked, and play around with them.
[00:13:09 -> 00:13:11]  But I had another idea.
[00:13:11 -> 00:13:12]  Maybe I could build an app
[00:13:12 -> 00:13:14]  that would connect all of the iPhones together
[00:13:14 -> 00:13:15]  to do cool things.
[00:13:15 -> 00:13:18]  When I moved to D.C., the project started in earnest,
[00:13:18 -> 00:13:20]  and once I had a working prototype,
[00:13:20 -> 00:13:24]  Luke ordered 50 more iPhones so that we could have 100.
[00:13:24 -> 00:13:27]  The resulting project is an app and server called MultiPhone
[00:13:27 -> 00:13:29]  that links all 100 iPhones together
[00:13:29 -> 00:13:31]  and turns them into a giant video screen,
[00:13:31 -> 00:13:35]  a chess board, a deck of cards, and more.
[00:13:35 -> 00:13:36]  You can check out my video
[00:13:36 -> 00:13:38]  explaining exactly how the app works.
[00:13:38 -> 00:13:39]  I'm really proud of it.
[00:13:39 -> 00:13:42]  This project is another example of starting small
[00:13:42 -> 00:13:43]  and working my way up.
[00:13:43 -> 00:13:44]  When I first had the idea,
[00:13:44 -> 00:13:47]  I didn't even know if it was going to be possible.
[00:13:47 -> 00:13:48]  These phones are pretty old,
[00:13:48 -> 00:13:50]  so I'd have to figure out what version of Xcode
[00:13:50 -> 00:13:52]  I needed to use and see if I could even build
[00:13:52 -> 00:13:54]  and run apps on these old phones.
[00:13:54 -> 00:13:55]  Once I got that figured out,
[00:13:55 -> 00:13:57]  I had to make sure that the phones
[00:13:57 -> 00:13:58]  could communicate with the server
[00:13:58 -> 00:14:01]  in reasonably close to real time.
[00:14:01 -> 00:14:03]  Once all of the experimentation was done
[00:14:03 -> 00:14:05]  and I felt confident that I could build the app,
[00:14:05 -> 00:14:07]  I worked on one feature at a time
[00:14:07 -> 00:14:09]  until I had enough features to call the project finished
[00:14:09 -> 00:14:11]  and make a video on it.
[00:14:11 -> 00:14:13]  I lived in D.C. for about eight months
[00:14:13 -> 00:14:15]  and had an incredible time there.
[00:14:15 -> 00:14:16]  I think about it often,
[00:14:16 -> 00:14:17]  and I honestly wouldn't be surprised
[00:14:17 -> 00:14:19]  if I end up back there in the future.
[00:14:19 -> 00:14:22]  But in August of 2021, Luke was moving apartments
[00:14:22 -> 00:14:24]  and the Google offices had opened back up,
[00:14:24 -> 00:14:26]  so my time in D.C. was over
[00:14:26 -> 00:14:27]  and it was time to move to Mountain View.
[00:14:27 -> 00:14:29]  Since my team was pretty small
[00:14:29 -> 00:14:30]  and Google still wasn't requiring people
[00:14:31 -> 00:14:32]  to show up in person,
[00:14:32 -> 00:14:34]  I typically went to a different office each day
[00:14:34 -> 00:14:37]  to try different cafes and work in different environments.
[00:14:37 -> 00:14:38]  I continued to build features
[00:14:38 -> 00:14:40]  and fix bugs for the mobile app,
[00:14:40 -> 00:14:44]  but in early January of 2022, I got really lucky.
[00:14:44 -> 00:14:46]  I can't talk too much about the specifics,
[00:14:46 -> 00:14:47]  but there was an emergency project
[00:14:47 -> 00:14:49]  that some people in my organization
[00:14:49 -> 00:14:50]  were tasked with delivering.
[00:14:50 -> 00:14:52]  My manager and I worked on it
[00:14:52 -> 00:14:54]  along with some other engineers.
[00:14:54 -> 00:14:56]  The plan was for it to be a one-off deliverable
[00:14:56 -> 00:14:57]  that we would hand off to another team
[00:14:57 -> 00:15:00]  and then go back to our normal jobs.
[00:15:00 -> 00:15:01]  But the project was a success
[00:15:01 -> 00:15:02]  and I guess Google decided
[00:15:02 -> 00:15:03]  that it would be in their interest
[00:15:03 -> 00:15:06]  to invest in a permanent team to build it out.
[00:15:06 -> 00:15:07]  While most of the contributors
[00:15:07 -> 00:15:08]  went back to their normal jobs,
[00:15:08 -> 00:15:10]  my manager stayed on the project
[00:15:10 -> 00:15:12]  to be the engineering lead and I joined him.
[00:15:12 -> 00:15:13]  For a few months,
[00:15:13 -> 00:15:15]  it was just me and my manager on the project,
[00:15:15 -> 00:15:17]  but since then, we filled out our engineering team
[00:15:17 -> 00:15:20]  and hired product managers and UX folks
[00:15:20 -> 00:15:21]  to round out the team.
[00:15:21 -> 00:15:24]  Since I was the second most senior member of the team
[00:15:24 -> 00:15:25]  and because I had been at Google
[00:15:25 -> 00:15:26]  for over a year at this point,
[00:15:26 -> 00:15:28]  I became the tech lead
[00:15:28 -> 00:15:30]  of a significant portion of our product.
[00:15:30 -> 00:15:33]  These days, I manage the work of three other engineers
[00:15:33 -> 00:15:34]  and the four of us are responsible
[00:15:34 -> 00:15:37]  for the front-end client and server code for our product.
[00:15:37 -> 00:15:39]  I want to take a second to talk about the difference
[00:15:39 -> 00:15:42]  between programming and software engineering.
[00:15:42 -> 00:15:43]  Programming is, in fact,
[00:15:43 -> 00:15:45]  just one piece of software engineering
[00:15:45 -> 00:15:48]  and it's not even the most complicated piece.
[00:15:48 -> 00:15:50]  When you're working on a school or personal project,
[00:15:50 -> 00:15:53]  you generally have a good idea of what you want to build
[00:15:53 -> 00:15:55]  and you hack away at it until it works.
[00:15:55 -> 00:15:58]  This is programming writing code,
[00:15:58 -> 00:16:00]  but software engineering is so much more than that.
[00:16:00 -> 00:16:03]  In my daily job, I work on large, complex systems
[00:16:03 -> 00:16:06]  that are going to be maintained by many engineers,
[00:16:06 -> 00:16:09]  will be around for a long time, and that have to work well.
[00:16:09 -> 00:16:11]  When I start working on a new project,
[00:16:11 -> 00:16:13]  I first have to understand the requirements,
[00:16:13 -> 00:16:15]  which involves talking to product managers,
[00:16:15 -> 00:16:18]  UX folks, and other engineers.
[00:16:18 -> 00:16:20]  Once I have an understanding, I write a design document
[00:16:20 -> 00:16:22]  where I detail the approach I want to take,
[00:16:22 -> 00:16:24]  why I'm choosing that approach,
[00:16:24 -> 00:16:26]  how I'll go about doing it,
[00:16:26 -> 00:16:27]  and the other approaches I considered
[00:16:27 -> 00:16:29]  and why I didn't choose them.
[00:16:29 -> 00:16:32]  These documents are often very long and technical.
[00:16:32 -> 00:16:33]  Then I send them out for review
[00:16:33 -> 00:16:35]  and go through a few rounds of comments,
[00:16:35 -> 00:16:38]  sometimes in meetings and sometimes asynchronously.
[00:16:38 -> 00:16:39]  Once the design is approved,
[00:16:39 -> 00:16:41]  I'll start working on the project,
[00:16:41 -> 00:16:43]  but I'll often run into unforeseen issues
[00:16:43 -> 00:16:45]  that require me to revise the design.
[00:16:45 -> 00:16:47]  Sometimes I'll even have to start from scratch.
[00:16:47 -> 00:16:49]  As I'm designing the system,
[00:16:49 -> 00:16:51]  there are a lot of things that I have to keep in mind.
[00:16:51 -> 00:16:52]  I have to write tests
[00:16:52 -> 00:16:54]  and make sure that the code is well covered.
[00:16:54 -> 00:16:56]  I have to worry about logging and monitoring
[00:16:56 -> 00:16:57]  and security and privacy.
[00:16:57 -> 00:16:59]  I have to make sure that errors are recorded
[00:16:59 -> 00:17:02]  and that the right people are notified as needed.
[00:17:02 -> 00:17:04]  I have to make sure that the system is fault tolerant
[00:17:04 -> 00:17:06]  so that it can recover from bad scenarios.
[00:17:06 -> 00:17:08]  And all of the code that I write has to be clean,
[00:17:08 -> 00:17:10]  concise, well-documented,
[00:17:10 -> 00:17:12]  and in conformance with the company style guide
[00:17:12 -> 00:17:15]  so that other engineers who have to read and modify my code
[00:17:15 -> 00:17:17]  will have an easier time doing so.
[00:17:17 -> 00:17:19]  All of this stuff, especially the design,
[00:17:19 -> 00:17:21]  is the real meat of software engineering.
[00:17:21 -> 00:17:23]  A lot of this stuff just doesn't come up
[00:17:23 -> 00:17:25]  when you're working on a small personal project
[00:17:25 -> 00:17:27]  or hacking away at something for a hackathon.
[00:17:27 -> 00:17:30]  If this all sounds a bit intimidating to you, don't worry.
[00:17:30 -> 00:17:32]  When you first start a software engineering job,
[00:17:32 -> 00:17:35]  you'll mostly just be doing programming.
[00:17:35 -> 00:17:37]  The first few months are dedicated to ramping up,
[00:17:37 -> 00:17:39]  learning about the company's internal tools
[00:17:39 -> 00:17:40]  and best practices,
[00:17:40 -> 00:17:42]  as well as the code base and product
[00:17:42 -> 00:17:43]  that you'll be working on.
[00:17:43 -> 00:17:45]  As you gain more expertise,
[00:17:45 -> 00:17:47]  the other pieces of software engineering
[00:17:47 -> 00:17:49]  will be introduced slowly but surely.
[00:17:49 -> 00:17:50]  For your first project,
[00:17:50 -> 00:17:52]  you'll probably be given a fairly straightforward feature
[00:17:52 -> 00:17:55]  to implement that requires little exploration.
[00:17:55 -> 00:17:58]  But for your second project, there may be some uncertainty,
[00:17:58 -> 00:17:59]  so you'll have to make a decision
[00:17:59 -> 00:18:01]  and justify it in a design doc.
[00:18:01 -> 00:18:04]  And slowly but surely, the other stuff will come in.
[00:18:04 -> 00:18:05]  As you gain seniority on your team
[00:18:05 -> 00:18:07]  and become an expert in certain areas,
[00:18:07 -> 00:18:09]  you may find that your teammates,
[00:18:09 -> 00:18:11]  and perhaps even people outside of your team,
[00:18:11 -> 00:18:12]  will come to you with questions,
[00:18:12 -> 00:18:15]  and you may even find that you're able to answer them.
[00:18:15 -> 00:18:18]  You'll start to guide or influence your teammates' work.
[00:18:18 -> 00:18:21]  You'll ask more relevant questions in meetings,
[00:18:21 -> 00:18:24]  poke more holes in designs, and so on and so forth.
[00:18:24 -> 00:18:26]  It's a gradual process.
[00:18:26 -> 00:18:27]  You don't wake up one day
[00:18:27 -> 00:18:29]  and realize you've become a tech lead.
[00:18:29 -> 00:18:30]  You just notice over time
[00:18:30 -> 00:18:32]  that you're becoming more independent,
[00:18:32 -> 00:18:35]  making the right decisions quicker and more often,
[00:18:35 -> 00:18:36]  and providing more value.
[00:18:36 -> 00:18:38]  It's a great feeling.
[00:18:38 -> 00:18:40]  And that just about catches us up to today.
[00:18:40 -> 00:18:43]  I've been at Google for almost two years now,
[00:18:43 -> 00:18:44]  and I'm looking forward to delivering
[00:18:44 -> 00:18:46]  the first version of our product this year.
[00:18:46 -> 00:18:48]  I also work on Finale on occasion,
[00:18:48 -> 00:18:51]  though the app is pretty mature and feature-rich,
[00:18:51 -> 00:18:53]  so there isn't much to do these days.
[00:18:53 -> 00:18:55]  And I have some really exciting projects in the works,
[00:18:55 -> 00:18:57]  so definitely stay tuned for them.
[00:18:57 -> 00:18:59]  My plans for the future are a bit hazy.
[00:18:59 -> 00:19:02]  I don't have any immediate plans to leave Google,
[00:19:02 -> 00:19:04]  and I'll probably be here for at least a few more years,
[00:19:04 -> 00:19:07]  but eventually I want to go off and do my own thing.
[00:19:07 -> 00:19:09]  I hope that one day I'll have an idea
[00:19:09 -> 00:19:10]  that I'm really excited about
[00:19:10 -> 00:19:12]  and that I think could work well as a company,
[00:19:12 -> 00:19:14]  and then I'll get a group of friends together
[00:19:14 -> 00:19:15]  to make it a reality.
[00:19:15 -> 00:19:17]  I'm confident that this will happen one day.
[00:19:17 -> 00:19:19]  After sitting down to write this all out,
[00:19:19 -> 00:19:22]  I realized just how much I've grown over the past 10 years
[00:19:22 -> 00:19:23]  since I created this YouTube channel.
[00:19:23 -> 00:19:25]  I've learned many languages and frameworks,
[00:19:25 -> 00:19:27]  built many projects, big and small,
[00:19:27 -> 00:19:29]  participated in a lot of events,
[00:19:29 -> 00:19:33]  met incredible people, and grown so much as a person.
[00:19:33 -> 00:19:34]  There are lots of projects and experiences
[00:19:34 -> 00:19:35]  I didn't even get to mention
[00:19:35 -> 00:19:38]  because this video is long enough as it is,
[00:19:38 -> 00:19:39]  but I think you get the idea.
[00:19:39 -> 00:19:42]  Before I end this video, I have a lot of people to thank.
[00:19:42 -> 00:19:45]  First, my family, especially my parents and grandparents,
[00:19:45 -> 00:19:47]  who have supported me throughout my entire life
[00:19:47 -> 00:19:49]  and enabled me to reach this point.
[00:19:50 -> 00:19:51]  I distinctly remember my grandparents on my dad's side
[00:19:51 -> 00:19:54]  got me a copy of Multimedia Fusion 2
[00:19:54 -> 00:19:56]  after I had used it at the summer camp.
[00:19:56 -> 00:19:57]  My grandparents on my mom's side
[00:19:57 -> 00:20:01]  got me a MacBook Pro in 2011 that I used for seven years
[00:20:01 -> 00:20:04]  to build many of the projects I've discussed in this video.
[00:20:04 -> 00:20:06]  Both sets of grandparents helped me enormously
[00:20:06 -> 00:20:07]  in paying for college.
[00:20:07 -> 00:20:10]  And of course, my parents always encouraged me
[00:20:10 -> 00:20:13]  to pursue my interests by giving me access to technology,
[00:20:13 -> 00:20:14]  signing me up for tech camps,
[00:20:14 -> 00:20:16]  and being the first and only users
[00:20:16 -> 00:20:18]  of the silly applications and games
[00:20:18 -> 00:20:20]  I made in the early years.
[00:20:20 -> 00:20:21]  I love you all so much.
[00:20:21 -> 00:20:25]  Next, my friends who have supported me and enriched my life.
[00:20:25 -> 00:20:28]  I keep in touch with friends from all stages of my life,
[00:20:28 -> 00:20:31]  and many of the experiences I've reflected on in this video
[00:20:31 -> 00:20:33]  were made more meaningful by the friends
[00:20:33 -> 00:20:35]  who were there with me.
[00:20:35 -> 00:20:37]  There are too many names to name individually,
[00:20:37 -> 00:20:40]  but you all mean the world to me, and I love you all.
[00:20:40 -> 00:20:42]  Next, all the people who I've worked with,
[00:20:42 -> 00:20:45]  whether in a programming competition, a hackathon,
[00:20:45 -> 00:20:48]  a project, a class, an internship, or my job.
[00:20:48 -> 00:20:50]  I've learned so much and become a better programmer
[00:20:50 -> 00:20:52]  and software engineer because of them.
[00:20:52 -> 00:20:54]  I want to give special shout outs
[00:20:54 -> 00:20:56]  to my high school computer science teacher, Tom,
[00:20:56 -> 00:20:59]  who has continued to run CodeLM with me every year,
[00:20:59 -> 00:21:01]  and my former manager at Google, Irfan,
[00:21:01 -> 00:21:03]  who has helped me grow so much as an engineer
[00:21:03 -> 00:21:06]  over the past almost two years.
[00:21:06 -> 00:21:08]  And finally, everyone who has watched my videos
[00:21:08 -> 00:21:09]  over the years.
[00:21:09 -> 00:21:11]  I was inspired to make this video
[00:21:11 -> 00:21:13]  because of all of the incredibly moving comments
[00:21:13 -> 00:21:15]  that people have left on my videos over the years,
[00:21:15 -> 00:21:18]  saying that they started programming because of my videos
[00:21:18 -> 00:21:20]  and that they were now finding success.
[00:21:20 -> 00:21:22]  I made this video partially to serve
[00:21:22 -> 00:21:24]  as a sort of time capsule for myself,
[00:21:24 -> 00:21:26]  but also so that I could try and impart some wisdom
[00:21:26 -> 00:21:28]  that I've learned over the years.
[00:21:28 -> 00:21:29]  I hope you found this video interesting,
[00:21:29 -> 00:21:32]  enjoyable, and maybe even helpful.
[00:21:32 -> 00:21:33]  Stay tuned to this channel
[00:21:33 -> 00:21:35]  because although I don't post often,
[00:21:35 -> 00:21:38]  you can expect some cool new videos in 2023.
[00:21:38 -> 00:21:40]  Thank you so much for watching,
[00:21:40 -> 00:21:42]  and I'll see you all in the next one.
[00:21:42 -> 00:21:43]  Bye for now.
[00:21:43 -> 00:21:44]  ♪ Hey ♪
