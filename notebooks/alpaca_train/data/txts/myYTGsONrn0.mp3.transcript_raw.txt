 Hi, welcome in another video of Cloud in 5 Minutes.  Today, I want to talk about the Azure Resource Manager,  the ARM template.  You heard about it, but you don't know how to get started.  Today is your lucky day because I will share with you  my five tips to get a clean ARM template every time.  Aussi, si vous préférez,  j'ai une version en français de ce vidéo.  Cliquez juste ici dans le coin en haut à droite.  Hello again, let me introduce myself.  I'm Franck Boucher, Microsoft Azure  MVP based in Montreal in Canada.  Today, I will be talking about ARM template.  Those are JSON file.  You could be building them from scratch  with your favorite text editor.  But if you're just getting started,  building your script from scratch  could be a little bit hard.  So what you could do is go in the Azure portal,  create your deployment by using the UI interface.  But then before creating the Create button,  just look on the side,  the Download Template and Parameters.  Click on that link.  It will open a new blade with everything you need,  the parameter files and the ARM template.  Just click the Download button and you're good to go.  If your solution is already running in Azure,  you could go in the Azure portal,  open the resource group blade,  and then on the left panel,  look for the automation script.  Click on that and you will be able to  download your script just like that.  In today's demo, what I want to do is use  the ARM template that was generated when we were  creating a VM and clean it and apply the best practices.  Let's get started.  I download the code generated from  the Azure portal and unzip it in a folder.  I will be working in Visual Studio Code.  I like it. You could use whatever tool you like.  I really like Visual Studio Code to play with ARM template.  In the zip file we download,  of course, we have the template and the parameter file,  but we have also a bunch of deployment scripts.  In PowerShell, Bash, Ruby,  and C Sharp that could help us deploying this template.  But today, we won't play with those.  We only focus on the parameter files and the template files.  Step number 1, use Git.  Even if it's only locally, use Git.  That will give you an infinite Control Z option.  You will always be able to return to  a point where your script was  working and will keep everything clean. Use Git.  Since I'm in Visual Studio Code,  it's super easy for me.  I just go in the source control tab and I  click this button here and I initialize my repo.  I can do my first commit.  Step number 2, validate, validate, validate.  When your validation pass,  then you commit and you validate often.  To validate today, I will use Azure CLI.  You could be using Azure PowerShell also if you like.  The command to validate is azuregroupdeploymentvalidate,  and you pass a resource group.  If you don't have one, it's time to create one.  You could use azgroupcreate,  and then you pass the name and the location of your user group.  Then for the validation,  we pass the template file and the parameter file.  We hit Enter, take just a few seconds.  When we get a long script like that,  it's the ARM template populated with  every real resource name that will be used,  resource ID, means it's good.  If it was an error,  it would have been super short.  Perfect. Step number 3.  Nobody likes an ARM template with 51 parameters.  Step 3, reduce the number of parameters as much as possible.  We cannot just delete them, of course.  We need to move them to the variables and then play from there.  The way I do that is I go back in  the parameter files and I bubble up every parameter that I want to keep.  For in this sample,  I will keep only four,  so location, virtual machine name,  admin name, and admin password.  Everything else, I want to remove it.  I will just select everything that I want to remove,  remove it, remove the last comma.  That will be my new parameter file.  Now I paste that in a new document, just like this.  What's nice in Visual Studio Code is I have a multi-select cursor.  For example, if I click here and then I hit the Ctrl F2,  I now have a multi-selection and I can just  continue and select everything until that.  If I delete, voila.  Now I could do the same thing in here,  Ctrl F2, and voila.  I have now everything that is ready to be used in my template file.  I will use that and paste it in my template.  In my template, I will go in the section variables.  Here, I will keep just an empty line to make it clear that those are new.  Perfect. Now I can remove all the parameter I'm not using anymore,  just like that.  Perfect. However, now in my file,  it's using parameter that doesn't exist.  I need to change every time I was using a parameter and a name,  that I change it to a variables.  I need to change it for variables here.  You just need to pass and do that every time.  Once you think you're done cleaning the parameters,  now it's time to validate.  Don't forget to save and go save your parameter files also.  Now it's time to validate.  Perfect. It worked.  Now, we commit.  A little tips here,  if you're using a template that was generated from  a solution that is already running in Azure,  you will have a little bit of noise,  a lot of information in fact,  regarding what's already running.  In the ARM template,  you will have the full IDs and the states of all the resources.  You will need to clean that also.  For example, in here,  I have comments.  Don't hesitate, you can remove that.  You won't need it.  Also, for multiple resources,  you will have provisioning state and unique identifier.  You don't need those also.  Don't hesitate and remove them.  It will help you a lot to have a clean ARM template.  Step 4, use a unique string,  a suffix or a unique identifier to add to your deployment.  Why? Because if you're trying to deploy the same VM over and over,  you will get some problem because some names may already be used.  A good way to do that is use  a unique identifier and add it to your names or your resources.  For example, you could add a suffix just like that,  and that suffix is use the function unique string that  will build a hash based on the parameter you pass.  Right now, what I'm using as a parameter are  the resource group ID and the location.  By doing so, if you're deploying in another location,  the hash will be also different.  Now, for example, if I want to use that in the virtual machine name,  what I want to do is I will create a new variable called VMName,  and I will concatenate the parameter  virtual machine and the variable suffix.  Now, what I want to do is I want to change where  everywhere with parameter a virtual name was used,  and instead use the variable VMName,  just like that. Of course,  in this first one,  I don't want to change it, so we'll skip it,  and I will do the others.  Now, you guessed it, let's validate.  It passed. Before going to the next step, we commit.  Step 5, use the variables.  Of course, it's in this step that we will spend a lot of time,  because we want to remove all the static value and put something more dynamic.  For example, if I look here to my virtual network name,  I use Cloud five minutes in the name,  because it was the name of my resource group,  that's why the Azure portal generated like that.  But if I'm deploying in another resource group,  I don't want that name to be there,  so I want something a little bit more dynamic.  Let's replace that.  We'll create another variable just under so you could see it,  and I will be concatenating the variable resource group name,  the variable resource group name with VName.  Why use the resource group name while I have the object and I could just point to it?  Well, I will explain.  First, let's create that variable,  so resource group name here,  and I put a two lower,  because sometime when we create resource group name,  we are allowed to have uppercase and lowercase,  so it's great, it's easy to read.  But for some value,  having uppercase won't work.  That's why I do that to minimize the issue.  Another example here will be my network interface name,  where the name of the VM is used.  I don't want to use that name.  Maybe the name of the VM I'm creating right now is different,  so I want something dynamic.  Instead, I could be using something like that.  Again, two lower,  and I will concatenate the virtual machine name that I have.  I will put Nick as a role,  so it will help me to identify in a suffix.  Another example here will be that diagnostic storage account name.  If I'm trying to use the same pattern,  it will be too long,  because the name must be shorter than 24 character.  What I can do is use the same pattern,  but use the function substring,  but only keep the 24 first characters.  You just need to continue like that,  parameter, power parameter,  and try to remove everything that is static or  too precise for this specific instance.  Step number 6, because I have something more for you.  Use t-shirt size.  What it mean is you're using something simple for complex stuff.  For example, as a developer,  I don't really know what size of machine I need.  Is it standard? Is it epic?  Is it like, I don't know,  it's too much information for me.  What I know is what I will be doing on it.  The idea is to create a parameter where you will  pass a word that means something for the developer or  the person that will be consuming and deploying your ARM template,  and inside the ARM template,  you translate that in something more specific.  For example, here I create a new parameter called environment size.  It's a string, and the default value is medium,  and I allow only a certain type of value.  Right now, it's only two,  it could be large and it could be medium.  No small, no dev one small machine.  Of course, to keep the best practices, I pass metadata.  Now, what I want to do is create a variable that leverage that information.  Instead of virtual machine size,  I won't need that one anymore.  I will delete it and I will paste that one.  T-shirt size, now I have two object in it,  I have the object medium and I have the object large.  Those object could contain a much detail information  and one specific parameter could have a lot of values in it.  I could reuse that and have a lot of impact.  Right now, I'm just specifying two different size of VM.  Now, I just need to use it.  I'll go in my virtual machine when it's created and I will  change this variable value by a new one,  and it will be my variable t-shirt size  with the parameter environment size.  Then I will be navigating,  so it will be t-shirt size.parameterEnvironment.vmsize.  That way, I will be using the good value.  To be sure, the best way is to validate the template.  Probably be on the top,  so I search here,  I see the VM size is perfect.  It's exactly what I was expecting.  I didn't pass any new parameter,  so I choose the default value.  If I pass a parameter large,  then it will use the good one.  If I pass small or extra large,  this value is not supported,  so the person will have an error and  the ARM template won't get executed.  I hope it will help you.  It helped me a lot when I'm doing ARM template development.  If you have questions or any suggestion about  the best practices that we should be using,  write it down in the comment.  I hope that you like this video and I hope it was useful.  See you next time.  You 