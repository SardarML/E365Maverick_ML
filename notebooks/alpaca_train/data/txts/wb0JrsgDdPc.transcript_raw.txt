 Zu behaupten, dass das Informatikstudium leicht und gut nebenbei zu machen sei, ist falsch.  Dass ein Informatikstudium nur etwas für Genies sei, ist aber auch falsch.  Allerdings sorgen viele Fehler, die Studierende besonders in den ersten Semestern, aber auch später begehen, dafür,  dass das Studium schwieriger wird, als es eigentlich sein müsste.  In diesem Video möchte ich dir zehn klassische Fehler vorstellen, die man im Laufe seines Informatikstudiums unbedingt vermeiden sollte.  Einige von diesen Tipps sind auch auf andere Studiengänge übertragbar.  Nicht in die Vorlesung gehen.  Der erste Fehler ist natürlich sehr offensichtlich, doch viele Studierende denken, dass es ausreicht,  sich die Vorlesungsfolien im Nachgang anzuschauen oder die Mitschriften eines Kommilitonen zu verwenden.  Das kann man mal machen, doch es sollte nicht zur Gewohnheit werden,  da man dadurch quasi nur passiver Wissenskonsument ist und keine direkten Fragen stellen kann.  Der Spruch, wieso, weshalb, warum, wer nicht fragt, bleibt dumm, hat einen wahren Kern  und Interaktionen sind für den Lernprozess genauso wichtig wie Phasen des intensiven Selbststudiums.  Wenn du Präsenz zeigst und kritische Fragen stellst, hast du gegebenenfalls sogar Vorteile  bei Abnahmen von Abgaben in den Laborpraktika, da dem Professor in deinem Gesicht bekannt vorkommt  und sie damit einen Studenten verbinden, der sich aktiv mit dem Stoff auseinandersetzt.  Da ich selbst schon als Dozent tätig war, kann ich sagen, dass man diesen Effekt nicht außer Acht lassen sollte.  Wenn du, wie ich damals, dualer Student bist, dann erübrigt sich die Frage, hingehen oder nicht hingehen sowieso,  da du vertraglich dazu verpflichtet bist, in die Vorlesungen zu gehen.  In einigen Bundesländern, so zum Beispiel Brandenburg, gibt es sogar Anwesenheitspflichten.  Wenn du an der Hochschule München studierst, wirst du in den AW-Fächern ebenfalls eine Anwesenheitspflicht haben,  das heißt, du musst eine bestimmte Anzahl an Vorlesungen vor Ort anwesend sein.  Klausuren schieben  Klausuren solltest du nach Möglichkeit nicht schieben, da du das Problem tatsächlich nur aufschiebst und nicht wirklich behebst.  Im Gegenteil, wenn du einmal eine Prüfung geschoben hast, dann musst du den Aufwand für ein anderes Semester einkalkulieren  und wer weiß, wie deine Situation dann aussieht.  Außerdem musst du die Inhalte aus den Vorlesungen und gegebenenfalls des Praktikums immer wieder wiederholen  und hast dafür gegebenenfalls weniger geistige Kapazitäten für andere Fächer.  Insbesondere dann, wenn dir ein Fach schwerfällt, solltest du es nicht schieben,  da du dadurch gegebenenfalls später in deinem Studium exmatrikuliert wirst.  Einer meiner Kommilitonen ist zum Beispiel im fünften Semester exmatrikuliert worden,  da er Analyse so lange wie möglich aufgeschoben und dann im Drittversuch nicht bestanden hat.  Das ist zwar bitter, doch einen Härtefallantrag konnte er nicht stellen,  weil dafür nur noch die Bachelorarbeit und drei weitere Fächer ausstehen dürfen.  Es ist immer gut, sich seine Chancen so früh wie möglich auszurechnen  und das geht eben nur, wenn du die Spielregeln der jeweiligen Fächer kennst.  Auch der Gedanke, naja, ich mache jetzt erstmal den Schein und die Prüfung schreibe ich dann wann anders,  ist toxisch, da du dann von vornherein eine ganz andere Attitüde dem Fach gegenüber an den Tag legst.  Irgendwann bist du dann vielleicht sogar an dem Punkt, an dem du sagst,  naja, ich streibe die Prüfung ja sowieso erst im nächsten Semester, dann mache ich den Schein einfach dann.  Stelle dich der Prüfung und schau, was dabei herauskommt.  Die einzigen beiden Fälle, in denen du meiner Ansicht nach einen legitimen Grund hast, die Prüfung zu schieben,  ist eine länger anhaltende Krankheit oder das Vorziehen einer anderen Prüfung.  Alles andere schmälert sehr wahrscheinlich deinen Studienerfolg.  Speziell für das Informatikstudium solltest du dich mit dem Gedanken anfreunden,  nicht nur die in der Vorlesung behandelnden Sprachen zu lernen.  Es ist nämlich so, dass du im ersten und zweiten Semester mit allen zusammen eine Programmiersprache,  zum Beispiel Java, lernst und dir danach selbstständig andere Sprachen erarbeiten musst,  die du dann für die Laborpraktika brauchst.  Wir haben damals im dritten Semester nämlich gesagt bekommen,  dass wir für das Praktikum in Algorithmen und Datenstrukturen C++ können müssen,  obwohl wir zwei Semester lang nur Java gelernt haben.  Auch in der Vorlesung wurden alle Beispiele dann in C++ gezeigt, ohne dass wir die Sprache explizit gelernt haben.  Die Professoren gehen davon aus, dass wenn du eine Sprache gelernt hast,  du dir auch andere Sprachen und Eigenregie aneignen kannst.  Deshalb sind die Aufgaben auch oft sehr abstrakt gehalten, um dich eben dazu zu befähigen,  Programmierkonzepte in anderen Sprachen wiederzuerkennen.  In späteren Semestern wurde dann in einem Seminar zur Programmierung moderner Webanwendungen Django vorausgesetzt,  wofür man Python beherrschen musste, was bis dato in noch keiner Vorlesung thematisiert wurde.  Du siehst schon, dass du mit Java alleine beispielsweise nicht auskommst.  Das ist wieder ein Argument dafür, ein duales Studium zu absolvieren, da die Wahrscheinlichkeit sehr hoch ist,  dass du bei deinem Kooperationspartner eine neue Sprache lernst, die du noch nicht im Studium behandelt hast  und von der du in höheren Semestern profitierst.  Ein Video zum dualen Studium habe ich übrigens unten in der Videobeschreibung verlinkt.  Nur konventionelle Wege gehen  Wenn du dich nur an den Arbeitsauftrag und an das, was du in der Vorlesung gelernt hast, hältst,  dann ist das ein durchaus gangbarer Weg, doch sorgt eben auch dafür, dass du nicht aus der Masse hervorstichst.  Traue dich, eigene kreative Wege bei der Lösung eines Problems zu gehen.  Wir hatten damals beispielsweise im Fach Verteilte Systeme den Auftrag,  eine Anwendung auf mehrere IT-Systeme zu verteilen  und dabei das Dining-Philosophers-Problem bei der Belegung von Ressourcen zu lösen.  Statt, wie fast jeder, zwei Laborrechner zu nehmen, diese über das Netzwerk zu verbinden  und ein paar Konsumen-Outputs zu erzeugen,  haben mein Laborpartner und ich eine Unity-App programmiert,  die wir auf einem Smartphone, einem Tablet und zwei Laborrechner in einer VM laufen gelassen haben,  die das Teleportieren einzelner Tasks, die wir als Philosophen dargestellt haben,  von einem Gerät auf ein anderes Gerät grafisch visualisiert hat.  Statt mühsam aus den Debug-Logs herauszulesen, was jetzt genau passiert ist,  konnte man das mit einer grafischen Lösung weitaus besser zeigen.  Die Abnahme war dementsprechend angenehm und wir haben nebenbei gelernt,  wie man in Unity eine Android-App programmiert.  Dadurch brennt man sich ins Gedächtnis der Professoren ein  und hat dadurch später bei der Wahl eines Betreuers für die Bachelorarbeit leichtes Spiel.  Nur die Laborrechner verwenden  Du musst dir offiziell zwar keinen eigenen Rechner für das Studium zulegen,  da du in der Theorie alles auf den Laborrechner machen kannst,  doch es ist maximal zu empfehlen.  Bedenke, dass die Hochschule nur eine bestimmte Zeit geöffnet hat  und du vielleicht nahtlos zu Hause weiterarbeiten möchtest.  Zudem haben nicht alle Laborrechner dieselbe Ausstattung gegeben,  falls müssen Tools nachinstalliert werden,  was bei fehlenden Administratorrechten schwierig wird.  Kurzum, du bist Informatiker.  Schaffe dir bitte einen eigenen Rechner an.  Im Optimalfall einen Laptop, den du überall mit hinnehmen kannst.  Zur Entscheidung, ob es ein MacBook oder ein Windows-Rechner sein soll,  mache ich noch ein separates Video.  Ich persönlich habe mein Studium mit einem Windows-Rechner gemeistert  und immer nur im Labor gearbeitet, wenn es nötig war,  und den Raum unter Umständen auch mit Studierenden teilen musst,  die eine sehr eigene Interpretation der üblichen Verhaltensetikette besitzen.  Nur ein Betriebssystem verwenden  Gehe nicht davon aus, dass Windows oder macOS ausreicht,  um sein Studium erfolgreich abzuschließen.  Spätestens im Fach Betriebssysteme  wirst du vermutlich mit einer Linux-Distribution arbeiten,  d.h. es bietet sich an, schon im Vorfeld mal mit einem Unix-Wii-System gearbeitet zu haben.  Wenn du im IT-Sicherheitsumfeld unterwegs bist,  dann wirst du höchstwahrscheinlich auch mit Windows alleine nicht glücklich.  Üblicherweise verwendet man keine Linux  oder man setzt sich eine eigene Pentesting-Maschine auf,  was allerdings nur sinnvoll machbar ist,  wenn du dich von dem Gedanken löst,  dass deine einfachen Anwenderkenntnisse im Betriebssystem ausreichen,  um alle Laborpraktika zu schaffen.  Die Mac-User haben da von vornherein schon einen kleinen Vorteil,  weil einige Programme, die man im Studium nutzt,  nicht ohne erheblichen Mehraufwand auf dem Mac laufen,  wie z.B. der MMIX-Assembler,  den man an der Hochschule München im Fach IT-Systeme verwendet.  Auch Linux bietet nicht immer eine Out-of-the-Box-Lösung an.  Dadurch lernt man aber wiederum,  seine eigene Maschine aufzusetzen  und versteht mehr über das Betriebssystem,  als wenn alles auf dem ersten Klick funktioniert.  In den Praktika zur Netzwerktechnik oder Embedded Computing  war beispielsweise Ubuntu Pflicht.  Aber keine Sorge,  du kannst mit VirtualBox verschiedene Betriebssysteme  auf einem Rechner verwenden  und die virtualisierten Images sogar überall mit hinnehmen.  Es ist aber auch möglich,  ein Multi-Boot-System aufzusetzen.  Unvorbereitet in die Praktika gehen  Für die Praktika geht wie für die Vorlesung.  Du solltest ohne Vorbereitung in ein Praktikum kommen  und nicht auf eine Nachbereitung verzichten.  Die Professoren merken, wenn du nichts vorbereitet hast  und dementsprechend unangenehm können die Abnahmen werden.  Wenn du weißt, dass eine Abnahme ansteht,  dann solltest du dir mindestens noch einmal  dein Code anschauen  und dir gegebenenfalls im Vorfeld  ein paar Rückfragen überlegen.  Du könntest aber natürlich auch gezielt  bestimmte Unstimmigkeiten einbauen  und so Rückfragen in einem ganz speziellen Bereich provozieren,  auf die du dich dann sehr gut vorbereitest.  Gleiches geht auch für mündliche Prüfungen,  wo du deine Informatikübungen gezielt  in eine bestimmte Richtung lenken kannst.  Nur alleine arbeiten  In so vielen meiner Videos habe ich diesen Satz bereits zitiert  und ich mache es an dieser Stelle immer wieder gerne.  Im Informatikstudium werden keine autistischen Einzelkämpfer,  sondern Teamplayer gesucht.  Informatik ist ein Teamsport  und genauso wie du in deinem späteren Berufsleben  nicht um die Arbeit mit anderen herumkommst,  wird auch dein Studium nicht nur aus dir und deinem Computer bestehen.  Alleine alle Module und damit verbundene Praktika  bestreiten zu wollen,  führt in vielen Fällen zu einem vorzeitigen Studienende.  Wenn du in einer Gruppe oder einem Zweierteam arbeitest,  kannst du Aufgabenteilungen machen,  dir bestimmte Themen noch einmal studentenfreundlich  von einem Studenten, also einem deiner Kommilitonen,  erklären lassen und anderen etwas erklären,  wodurch du den Stoff vielleicht auch noch einmal  etwas besser verstehst und überprüfen kannst,  ob du ihn tatsächlich verstanden hast,  also die klassische Feinwellenmethode.  Nur den Vorlesungsstoff lernen  Dieser Fehler geht in dieselbe Richtung  wie die Thematik mit den Programmiersprachen.  Wenn du nur das lernst, was in der Vorlesung dran kommt,  dann hast du das Konzept des Lernens,  wo noch nicht vollumfänglich verinnerlicht.  Die Informatik ist kein Wissenschaftszweig,  den man in x-beliebige kleine Lernhäppchen unterteilt,  die man sich dann ohne schneiden  und kauen einverleiben kann.  Mit dieser Einstellung wirst du im besten Fall  zu einem mittelmäßigen Informatiker ausgebildet,  was vermutlich nicht in deinem Interesse ist.  Wenn einem etwas liegt, dann ist man oft  aus eigenem Antrieb heraus motiviert,  so viel wie möglich über das hinauszulernen,  was man eigentlich rein formal lernen muss.  Jeder Mensch hat einen angeborenen Wissensdurst,  den man in einigen Bereichen mehr  und in anderen weniger stillen möchte.  Wenn du in deinem Studium nach der Vorlesung  bereits sitt bist, ist das ein Indikator dafür,  dass dich dieses Studium vielleicht doch nicht so ausführt,  wie du es dir eigentlich wünschen würdest.  Code nur aus dem Internet kopieren  Diesen Punkt solltest du bitte nicht falsch verstehen.  Natürlich ist es erlaubt,  Code aus dem Internet zu nutzen.  Was ist man denn für ein Informatiker,  wenn man noch nie auf Stack Overflow war  oder in GitHub-Repositories nach Lösungen  für eine bestimmte Teilaufgabe gesucht hat?  Man muss das Rad nicht jedes Mal neu erfinden,  denn es ist nichts Ungewöhnliches,  wenn man einen Codesnippet kopiert  oder eine Bibliothek verwendet.  Bei der Bibliothek sieht man diesen Gedanken  vielleicht noch mehr ein,  doch im Prinzip verwendet man dort auch Code  von anderen, den man quasi kopiert.  Der Unterschied ist jedoch dabei,  dass man durch den Import anzeigt,  wo der Code herkommt,  bzw. wie die Bibliothek heißt,  die man verwendet hat.  Je nach Komplexität des kopierten Codes  muss man auch nicht angeben,  dass man in der Bibliothek  viele Seiten an Suchergebnissen findet,  die alle einen sehr ähnlichen Code verwenden.  Das liegt daran,  dass es sich hier bei einem  in der Informatikerszene hinlänglich bekannten  nicht schwer zu implementieren Algorithmus handelt,  von dem kein Informatiker behaupten würde,  dass er ihn jetzt selbst entwickelt hat.  Die eigentliche Implementierung  ist dann nur noch Handwerk.  Es gibt teilweise sogar Code-Generatoren,  die das für einen übernehmen.  Worauf ich eigentlich hinaus möchte,  ist für das flüssige Sprechen einer Programmiersprache  eine regelmäßige Wiederholung notwendig.  Andernfalls kommst du an vielen Stellen ins Stocken  und weißt zum Beispiel nicht mehr,  wie man mit Python einen String in Großbuchstaben umwandelt.  Natürlich kannst du das ganz einfach  in einer Dokumentation nachlesen,  genauso wie du bestimmte Wörter  und grammatikalische Zusammenhänge  in anderen Sprachen in dicken Wälzern nachschlagen kannst.  Doch wirklich gut ist diese Vorgehensweise nicht  und du solltest dir intensiv überlegen,  was dir wichtiger ist.  Quick and dirty oder sorgfältig und nachhaltig?  Vielen Dank fürs Zusehen!  Solltest du weitere Fragen haben,  kannst du sie gerne unten in den Kommentaren  oder auf meiner Fragenplattform informatikstudium.net posten.  Bis zum nächsten Video! 