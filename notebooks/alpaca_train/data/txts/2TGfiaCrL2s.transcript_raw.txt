 Hi, I'm Jack Buffington for RobotBrigade.com. This is another video in my series of videos  about digital logic. In this one, I'm going to start in on talking about state machines,  and I'm going to talk about state diagrams and state tables for these state machines.  What is a state machine? A state machine is a circuit that can be in different states.  There are two different types of state machine, at least as I'm classifying it. You've got  counters, and you have everything else. I suspect that that's not that clear yet, so  let me show you a counter. A counter could look like this, where it has five states,  and at any one time, it's in only one of these states. The counter has a predetermined pattern  that it never deviates from. It always goes from state A to B to C to D to E. You can  design this to have any number of states. It could have two states, it could have a  hundred. As long as it always goes through the exact same pattern each time, it is a  counter. A counter, despite what we're calling it, doesn't actually have to be counting.  This wouldn't necessarily be 1, 2, 3, 4, 5, 1, 2, 3, 4, 5. It could be outputting a value  of 17, 12, 6, negative 4, and 50. It just doesn't matter as long as you have it wired  so that it goes through the same states in the same sequence every time, then it is a  counter. The more common state machine that you're going to see, or at least the more  complex that you're going to be doing more study with, is the everything else type. I'm  going to show you one type and we're going to work out a state diagram for it. I'm going  to have four different states, so A, B, C, D. I'm just making this up as I go, so bear  with me. There's a reason that I'm going to be taking a little while on this. A state  machine can have input and it can have output. Counters do not have input because they need  to go through the same sequence every time. An everything else kind can allow you to choose  which state it moves to based on your input. I guess technically you could have an up-down  counter which does have input, but it still goes through the same sequence every time.  It doesn't just necessarily jump from A to C. It gets more complex from that. Then it's  maybe not even in the same league if it has a reset or a load. Anyway, I'm getting ahead  of myself. A to B, let's say if I give it an input of 0, it will go to B. If I give  it an input of 1, it goes to A. If I look at the state diagram the way it is right now,  you couldn't tell me which state it goes to based on its input. We need to indicate that.  This is the way that I'm going to draw it. I'm going to have my input and then I'm going  to have my output. You can have any number of inputs and any number of outputs, but I'm  going to stick with just one bit of input and one bit of output just to keep things  simple. I said that this is a 0, takes it over to B, and let's just give it an output  value of 1 if it has that. Here, if it has an input of 1, it might still have an output  of 1. Alright, we're all done with A. B, maybe I'm going to say it goes to C. It's very important  to draw these arrowheads so you know which way it's going. If it's 0 and its output will  be 0 and D, 1 slash 0. We're done with B. C is going to go to D if it's 0 slash 0 and  around to itself, 1 slash 1. D is going to go to B.  This is a complete state diagram for a circuit. I won't tell you right now how this is actually  implemented. I'll get to that in another video. I'm going to show you now an equivalent way  of describing this circuit. This is a state diagram. Now I'm going to show you a state  table. A state table gets a little bit more complex. We can't name our states exactly  like this. We need to, well we could, but I'm not going to. I'm going to just tell you  right now, and we'll get to that why later, that this is going to require two flip-flops  to be able to have four different states. Alright, and I'm going to have the, A is going  to be represented by the value of the Q outputs on those flip-flops being 0, 0. B is 0, 1.  D is 1, 0. And D is 1, 1. Okay, so this is our little secret decoder pin. Whatever. Alright,  so let's take state A. If I have 0, 0, this is our current state. This is my input. Next  state. And output. And this is one of two different ways to draw a state table. I'll  show another one in future videos. This one is, this way is better for going to a synthesized  circuit, and the other way is better for state reduction, which I will also talk about in  a future video. So, if I have input of 0 and 1. So if my input for A is 0, then I go  to state B. And state B we can see is 0, 1. And if I have my current state is A, and my  input is 1, my next state is A. And if my input is 0, my output is 1, and 1. Okay? And  then, going with state B, if my input is 0, I go to state C, which is 1, 0, and my output  is 0. And bear with me, I think I maybe am going to speed it up at this point, because  it's pretty boring to watch me work my way through it, but I will stop speeding up in  just a second. Okay, so this is our completed state table for this state diagram. And you  can maybe pause it, take a look at how it looks. I'll see if I can get out of your way  so I'm not blocking your view of it. These two are equivalent. So, that is state tables  and state diagrams. If you've enjoyed this video, you might take a look at my YouTube  channel where I have more videos, or visit me at my website, which is robotbrigade.com. 