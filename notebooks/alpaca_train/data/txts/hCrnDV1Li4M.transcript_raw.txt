 Hi, I'm Jack Buffington for RobotBrigade.com. This is another video in my series of videos  about digital logic, and in this one I'm going to talk about multiplexers. Let's see what  a multiplexer is. A multiplexer is a logic device that has 2 to the n inputs that are  data inputs, it has n inputs that are select inputs, and it has one output line. Alright,  let's see how one of these guys is built internally. Now, if you've been watching these videos  in sequence, you'll remember the decoder, and the decoder works like this, where we  have, I'm going to do a 4 input multiplexer, and I'm going to draw it like this, well I'm  going to do the decoder first. Alright, and the decoder part is a bunch of AND gates,  so the 0 output connects up like this, and the 1 output, this will be my low bit, and  this will be my high bit, my 1 output will be like this, and my 2 is like this, and  my 3 is like this. Okay, now this is a decoder, it has 2 select inputs, 4 data outputs, or  4 outputs. In order to turn this into a multiplexer, what I do is I have one more line coming into  those AND gates, and then they all go into a OR gate. So, I can select which input is  going to be routed to the output. Okay, so that's great, but there's more. I'm going  to show you how you can make any logic function using a multiplexer. Let's say I have a truth  table that looks like this. Alright, and actually I'm going to, I'll make this a 4,  or a 3-bit truth table.  Okay. Alright, and just randomly I'm going to assign some outputs. Alright, and let's  say we have a multiplexer with A, B, and C, and 4, 5, 6, 7, 8 inputs, and 1 output. Alright,  we can implement this by saying, okay, if this is my 0 input, 1, 2, 4, 5, 6, 7, output  here is 1, and we'll just look at the 1 inputs for now. So, 2, 3, and 6. 2, 3, and 6, I'm  just going to connect those all to my positive rail, and all of the rest are going to be  connected to ground. And this implements that logic function. But wait, there's more. Alright,  let's say I only have a 2 input multiplexer. Well, you might think that that's not enough  to implement this function, but you'd be wrong. What we can do is we divide it, I'll  make some thicker lines here, into 2 count chunks. And we say, okay, A and B are right  here. Now let's look at what our output is doing in relationship to C. So, when A and  B select 0, the output is the inverse of C. So, I'm going to have C over here, and  for 0, I'm going to have C-bar connected to there. And here, well, I have 1 always, so  this one's just going to go to my positive rail. This one is always 0, so that one's  going to go to ground. And let's just change it so that I have 1 of everything. This one  is doing the same thing as C, and so I'm going to connect that over there like that. And  so now, by using my A, B, and C inputs, I can still, using a 4 input multiplexer, realize  a 8 value truth table. So, hopefully you found this video useful. If you like it, take a  look at my YouTube channel where I have other videos. For RobotBrigade.com, I'm Jack Buffington. 