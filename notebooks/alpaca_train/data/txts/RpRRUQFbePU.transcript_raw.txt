 Sorry, I was just running around getting some cables, but we don't need them any more.  So that was just a fun thing to do.  Hello everyone, sorry I'm late.  My name's Richard.  We'll be together for 1927.  Is that your name written on your shirt?  That is my name written on the shirt.  If you can decode it, you'll get it.  Oh, hello.  Hi, are there other people here I know?  Is there anyone here who I've talked to before?  No, just the one.  Do you guys find this room very hot and stuffy?  Yes.  Yes, it's unpleasant, isn't it?  I've turned the air conditioning on.  Who was in here before?  Does anyone know?  Banking and finance.  Banking and finance.  Let's see if it cools down.  If it doesn't, we'll start fooling around with the drawers.  Just give me one second to collect my thoughts.  I've literally run through the building stealing everyone's firewire cable.  I've knocked at the door and said, firewire cable?  Yes.  Out of the way.  Thanks.  So, could everyone bring a firewire cable tomorrow?  That would be a great help.  Give me one second to log in.  No, no, no cereal.  Well, no, bring it in.  Who knows?  We never know when we'll need one.  Give me one second.  All right, I think it's turning on.  It appears to be turning on.  Ah, fantastic.  We're in.  So, let's start with our course homepage as you'll get to type this.  Now, guys, come on.  I've done my part.  I'm here on time and organized.  The least you could do is just, you know.  Let's go tilde cs1927.  Let's go, and this is the course.  And has anyone already checked out this page?  Yes, some of you have.  Well done.  If you haven't, make sure you go.  Basically, the normal CSE beginning www.cse.unsw.edu.au slash tilde 1927.  So, welcome to 1927.  With layer upon layer of protection.  Just to make sure there's no accidental learning going on.  Let's make that bigger.  That's as big as we can get.  There we go.  All right.  Now, who can read that in the back?  Is that fine?  It's quite a bright room, but the slide's still bright enough.  Is it cooling down a bit, or is it still hot?  It's still too bright.  Let me see what we can do.  Ta-da.  How's that?  Much better.  So, welcome, everyone.  It'll take me a second to calm down, because when things go wrong at the beginning, you know, you get a bit flustered.  And you'll probably find this yourselves when you're programming or when you're in an exam, that sometimes things do go wrong.  And if you're all like me, once things go wrong, you put off your stride.  So, what's the best thing to do?  For example, if you're trying to work on your program and something goes wrong and you're stressed and cross, what's the best thing to do?  Work on something else.  Take a break.  What's your name?  Hossam?  Sam.  Just Sam.  Yep.  Sam's right.  So, basically, that's my advice.  Don't freak out, but calmly switch to something else.  In fact, my overall theory about computing is that although we initially approached computing as an exercise in syntax, in learning how a language works, or in understanding how to use a particular operating system, the computing is really more a mental discipline, I think.  And being a successful programmer is really a state of mind.  And it's a state of mind that involves sort of calmness and focus.  And when things go wrong, as things always do go wrong, we don't give up and we don't freak out.  We carefully try and try again.  And hopefully that's a message you've already got in 1.9.1.7.  In 1.9.2.7, we want to hone that message down a bit.  When things go wrong or you don't know what to do, don't just mindlessly try and try again.  In this course, we're going to suggest that you should adopt an attitude of systematically try, try again.  And we're going to try and now introduce some sort of methodology and systematization of the process of writing programs and dealing with problems.  Well, actually that's not strictly true.  You don't have to have come from 1.9.1.7.  Who here has come from another course?  Who here hasn't done 1.9.1.7?  Fantastic.  Okay, so you've all done 1.9.1.7.  I've been checking out 1.9.1.7 as it was running last semester.  I really like Morrie.  So you're very lucky to have him.  And I was enjoying watching what you're doing.  And some tutors mailed me, some of your tutors mailed me with pride at some of the assignments that you guys did, especially towards the end.  And I was just checking out the projects again just before I came here.  Let me just show you some of the projects that you guys did last semester.  Made me very happy.  Now, I've only previously looked at the ones that people sent me, and this morning I was going through looking at them all.  They're very slick.  Oh, I mean, this one's got a screen size problem.  But it's, that's, you know, that's a display.  It's on 140%.  That's what you're supposed to be getting in this course.  That's the speed at which I'll be talking and the expected mark to pass the course.  Yeah, yeah, you can't see it 140%.  Well, everyone, you'll have to get glasses that are 40% bigger to see.  So this is, this is awesomely good.  But you were struck with the constraints of the game that it wasn't a very visual game.  But this was just very impressive.  Did anyone write one which involved photographs?  I'm sure I saw one with photographs around the uni, but I haven't, I haven't seen it flipping through today.  Is that one of the ones here?  Which one is it?  Who's Ricky? Wave at me, whoever Ricky is.  Who's Ricky? Ricky, wave at me.  Ricky, Ricky's not waving. Oh, Ricky's further across.  Oh, there, you're Ricky? Hello, Ricky.  It's an excellent name.  What tutor were you in last semester?  Day...  What day was your tutorial?  Thursday at nine o'clock?  Oh, that's an H, isn't it? Thursday...  Oh, there's only one. There we are.  Is this it? Is this yours?  No, no. It's not up there.  Is this it? Is this yours?  Oh, okay. Alright, alright.  Well, that's an aborted attempt.  No, show it to me. I'll put it up next...  Just tell me at the end. I'll put it up next lecture.  Next pair of lectures on Thursday.  But I was very impressed with your guys' design ability,  and the games were fun,  and I enjoyed looking at them, and it was very good.  Here's my hope as to what you've already...  Now, that's spectacular.  Does anyone know Microsoft's phone number?  Look, I'm using Internet Explorer.  You wouldn't believe it.  I can't believe I'm using Internet Explorer.  Let's just fix that up.  Secondary market.  No.  Let's do this all in Firefox.  Let's go.  Yeah, we're going to get to...  Now, I'll have to start again at the beginning.  I am sorry about that.  Hello, everyone. Welcome to 197.  Okay, and make it... What was that, 140?  Hold on.  Oh, please turn your mobile phones off,  if you have a mobile phone.  Yes, Thurston, we have a problem.  Don't worry. It's just rebooting.  Everything's okay.  So, yeah, so, 1-9-1-7.  Here's what I expect you to get out of 1-9-1-7,  and here's what I hope you have...  No, here's what I hope you've got out of 1-9-1-7,  and what I'm expecting you to come to me with.  I'm assuming by now you can program in C.  I'm assuming you can deal with loops,  and nested loops,  and one-dimensional arrays,  and two-dimensional arrays.  Yeah, yeah, arrays to any dimension.  I'm assuming that you can...  You understand pointers and memory allocation,  that you understand how to use malloc,  that you can construct and traverse a linked list,  that you can construct and traverse a tree,  a binary tree.  I'm expecting that if I asked you to create a ring,  which is a list where the beginning attaches to the end,  that you'd be able to have a fair whack at doing it,  even if you hadn't already seen it.  In other words, I'm assuming you have a basic competency in C,  and in this course we'll be using C,  rather than teaching C.  If you are not up to speed with C,  if your C is not exactly spot-on,  then we'll be running a small prac exam next week in the lab,  which will give you an indication as to the level we expect.  If you don't manage to do the prac exam,  or if you do manage to do the prac exam,  but still feel there are weaknesses in your C,  can I encourage you, as quickly as possible,  to brush them up in your own time,  because we won't be spending any time on them in this course.  If you're worried about your programming ability,  please speak to your tutor,  and I'm sure they'll give you extra programming exercises,  and we might even run some remedial classes  for people who need an extra brush-up or reminder.  Just be aware that from now on,  I'm assuming everyone can program,  and we're going to do things with C,  rather than talk about C itself.  That's called a precondition.  Does everyone understand how preconditions work?  Let me show you on the board.  I want you to think of 1927 as being like a black box.  I'll give you some light.  I don't know how to turn that light on.  What do you think?  It's not plugged in?  No one's used this in hundreds of years.  There we go.  1927 I like to think of as a function,  and it takes in some students,  and it puts out some students.  It's a function,  and it's a function,  and it's a function,  and it's a function,  and it's a function,  so it's a function from students to students.  If you enter this course already knowing how to program,  my job is to put you out the other end of the course  as computer scientist.  So what do we call this thing that I said then,  if you already know how to program?  What's the jargon word for that?  It's a precondition.  Something that must be satisfied.  Have you learned this already in 1917?  Yes? No? Yes? No?  No? No? Okay.  Now you've learned it in 1927.  The things that you have to satisfy before starting  are called the preconditions.  The qualities that you can rely on after finishing  are called postconditions.  And a function is something that goes from preconditions  to postconditions.  In C, when you write a function  that has preconditions,  how do we deal with that?  If you're writing a function to divide a number by zero...  Excellent.  You're writing a function to take two numbers in,  divide one by the other,  and the precondition is that the number that goes on the bottom  is not zero.  How do you write that function?  And your output is the answer.  Assert. Yeah, that's right.  If you used an if statement,  you'd be using the logic of your program.  My program would be doing overhead,  and the actual flow of your function  would be trying to deal with the problem  of when an assertion is not met.  And it's not your program's problem  to deal with input  which doesn't meet the criteria.  So the idea is that we can assume  the input coming in is completely correct.  We don't have to put program and logic in  to deal with it not being correct.  Nonetheless, being paranoid programmers,  we know that sometimes it won't be correct,  so the standard way of dealing with that  is we put an assert at the beginning of your program  that asserts the preconditions.  So you would assert...  I can never remember which is on the bottom.  Is that the divisor or the dividend?  Or the...  Dividee?  The denominator.  That'll work for integers.  We might have to do something a bit fancier  for floating-point numbers. Can you read that?  No, it's actually quite glary.  No?  We get reflected light.  There we are, there are my shoes.  Okay, so  in this course,  if you were designing a course,  how would you ensure the preconditions  are met?  Prerequisites, yeah,  you can specify the preconditions,  but you can be sure that  somehow, as a programmer, you can be sure  that sometimes your function is going to be called  with data that doesn't satisfy the preconditions.  And you've got an assert at the beginning  to do it, and what am I putting in that's my equivalent  of an assert?  A PRAC exam.  Yeah, yeah, yeah.  If you don't pass the PRAC exam, I don't mind.  It's only worth a lab mark or something.  It's not irrelevant, but the reason is it's to flag that you're not  meeting the preconditions and to give you an indication to go on.  This is a bit depressing, isn't it? Let's talk about something more interesting than that.  Forty years ago,  almost to the day,  back in my day,  Neil Armstrong  landed on the moon.  And he said,  one small step for man,  one giant leap for mankind.  Which is a pretty cool thing to say.  And actually I heard an interviewer  interviewing him recently.  Recently I heard an interviewer interviewing him.  The interview actually happened 20 years ago.  And the interviewer said,  before you went up, I asked you at the press conference,  what were you going to say when you landed on the moon?  Did you have anything thought out?  And you looked at me blankly and said, no.  And yet when you landed, you had this beautiful thing to say.  When did it come to you?  When did you suddenly realise what you were going to say?  And Neil Armstrong said,  prevaricate. He didn't really answer.  But I was struck by that.  He wrote in such a short period of time, what a profound person.  And then I thought, probably not, because he was doing a profound thing.  And the phrase might have even suggested itself to him.  So let's look at this.  One small step for man, literally what he was doing  was a small step.  What was the giant leap?  The achievement, space.  In what sense,  if you were trying to explain it, I've got a five year old girl.  If I was trying to explain to her, Neil Armstrong said this.  He said, one small step for man,  one giant leap for mankind.  She'd go, she'd probably say,  she's very literal, did he leap? I don't understand.  How would I explain to her? What would I say?  On the moon, gravity's law, a small step could turn into a leap.  Yeah, I could. I could say that.  So what's the, I mean you know.  Can someone articulate?  Yeah, yeah.  What it's meaning is essentially,  the act itself is trivial,  the meaning of the act is quite profound.  Because he knew that once we'd done that,  within ten or twenty years,  we'd have colonies on the moon.  We'd be in Mars.  We'd be, you know, truly extraterrestrial.  It was a very exciting beginning.  I'd like you to think of 1917 as being  looking at the small steps.  1917 is about what we do.  The mechanics of a program.  Writing the program.  I think in computing, what's interesting for me,  is what it means when we write a program.  Thinking about a program in a more profound way.  You need to be able to write them  to get to this state.  You need to be able to take that step for it to be a giant leap.  But gee, if you were just talking about small steps all the time,  life wouldn't be that much fun.  So let's sort of have that as a motto for the course,  that this course in a way is about meaning.  Now I have three letters up here,  that's just my sort of mnemonic for remembering  the central sort of breakdown of the course.  So,  in computing we have  a problem.  We solve the problem  with  an algorithm.  We implement the algorithm  and produce a  program.  We run the program  and we get a  problem.  We get a process.  So this is a static thing,  this is a C source code,  this is the code in motion, it's called a process.  So this is  computing.  When you're learning  programming, like I'll use 1.9.1.7  over and over again, I hope you don't get sick of me saying  1.9.1.7, I'm just trying to contrast  what we're doing with what we've been doing before.  In 1.9.1.7 you've been interested  in which step,  or steps.  I think you will  generally have been given an algorithm.  Not always,  but generally given an algorithm  and you will produce a program to  implement that algorithm.  Sometimes for fun you might have had to think of your own algorithms.  So, hopefully you are  now very competent at this step in the process.  Given an algorithm, you can render  it into C.  Hopefully also in 1.9.1.7 you have learnt  what a program looks like  when it's running. Hopefully you now understand  the structure and organisation of memory,  you understand a little bit about the CPU,  you understand what's happening step by  step inside the computer.  So when you get a stack overflow,  hopefully you know what that means. When you get a segment fault,  hopefully you know what that means.  What happens if you get a segment fault?  What's probably happened?  It will crash,  but what does it mean?  You are accessing some memory  you shouldn't be accessing.  How could your program access memory it shouldn't be accessing?  Yeah, that's right.  If you are following pointers, you are doing some sort of pointer chasing thing,  is that what you mean?  If you are following pointers,  maybe moving along a linked list,  and one of your pointers points off into outer space,  it's just got random rubbish in it.  You jump to that spot and try and read from it,  and it's an area of memory, a segment,  that the computer is not expecting you to be able to read from.  It's not in the data segment.  Oh yeah, in an array, the same thing can happen too.  In an array,  the array might be located  near the end of a data segment.  Heck, it could be anywhere, couldn't it?  Let's suppose it's even at the beginning of a data segment,  and you've got a while loop that's scanning through the array,  and you don't terminate the while loop properly,  so you read beyond the bounds of the array.  You'll eventually start reading into another segment,  and you'll get a segfault.  Does it become a problem when you hit the segfault?  When is the actual problem, if we're looking at an array?  This is just quick super revision.  We're reading through an array.  Read, read, read, read, read.  I hit the end of the array, I keep reading.  Read, read, read, read, read.  When's it a problem?  Read, read, read, I now hit the end of the segment,  I'm in the next segment, now I get a segfault.  When did it become a problem?  What's that?  As soon as I pass the boundary, the end of the array.  What's the problem with reading or writing  beyond the bounds of an array?  You could attack other variables and damage the variables  in operating of your program?  That's one bad thing that could happen.  What's another even more bad thing that might happen?  You could set off a chain reaction?  You could?  You could?  You could have a sort of meltdown or something like that?  Yes, yes.  By changing the value of one variable,  it might change it in such a way that the program  keeps soldering on regardless,  but now one of the variables is skewif,  and that might cause it to muck up another variable.  Maybe the first variable it mucked up was the size of another array.  Now your other array...  Thank you.  Security's the problem.  Every time you turn on Windows and it starts saying  Microsoft apologises, Microsoft apologises,  Microsoft apologises for a little while,  what are they apologising for?  While it's downloading.  They're apologising for their programmers  writing programs which read  or wrote beyond the bounds of an array.  And hopefully in 1.9.1.7  you were chastised about doing that  and driven to not do that, is that right?  It's my personal bugbear because I teach security as well  and there is no fault,  there's no excuse for most of the security  vulnerabilities that  common software has these days,  it's simply because people are writing and reading beyond the ends of the arrays.  So one thing if you really want to annoy me ever  is just read or write  beyond the end of an array.  Every time you do that, somewhere  a fairy dies.  So,  please don't do that.  Okay, so hopefully  in 1.9.1.7 you've done these two parts.  The P and the P.  Well, the parts are actually moving.  So you've moved  from A to P.  Now in this course  we're in the other  half of the world.  We'll be looking  a bit at  problems  and we'll be looking a bit at algorithms.  We'll be  talking a bit  about moving from problems to algorithms  and the relationship between them.  In the course that follows this, 2.9.1.1  that's all  I talk about.  This arrow here.  2.9.1.1 is all about, given a problem,  how do I come up with an appropriate algorithm?  And by algorithm I actually mean algorithm and data structure.  They sort of go together normally.  So in this course, just to give us a context,  we're looking at problems and we're looking at algorithms.  Now I've got some admin stuff to do  because we always do that at the start of a course,  don't we?  Except we're so hot and stuffy  and we got here late and we're all stressed  that I think rather than doing the admin stuff  because how a course normally goes  as you know is  the first lecture you just talk about admin all the time  and then for most of the rest of the course  you learn stuff  and then for the last week or two the lecture just talks about movies.  I thought, why don't we just run it backwards?  So let's just talk about movies.  Because I happen to have some movies here that I've brought in.  Let me show you  these awesome movies.  Alright, I have here  I'm trying to  I've got some girls  and I'm trying to teach them about science fiction.  I think science fiction is very important.  I think science is very important.  So yeah, they like Hannah Montana  which is okay  but I'd like to show them real science.  So I started looking for science fiction movies  and I noticed this terrible thing  that in modern day science fiction movies  it's not about science anymore.  There's magic  and superstition  and it's like fantasy novels.  Notice the genre of science fiction has changed over the years.  It used to be hardcore physics  and now it's all magical  and we used to be that thick a book.  Now it's that thick to read one book  because there's too many characters  and they're all having magical experiences  and I hate magic  and stuff like that.  So let's not start talking about Harry Potter.  So I just like science  so I thought I'll show them some real hardcore science fiction.  So I got  The Invaders from Mars  The Invisible Man  Plan 9 from Outer Space  Them. Has anyone seen the movie Them?  It's about giant ants  affected by a nuclear  not because of magic  but because of a power station leakage  and the ants walk around all the time just going  eee eee eee  which is completely non-scary  but somehow very scary. It's called Them.  Queen? Oh! Queen!  There's nothing scarier than Queen.  The Invasion of the Body Snatchers  Countess Dracula  There's an overlooked classic.  Now that's a weird thing isn't it?  Because science, when it started off  the very first science fiction  the very first science fiction book I know of  I was going to say the very first science fiction  but I might have got it wrong.  Well no!  You think of Tempest or something? Now that's magic!  No, we're not going that way.  I was going to say the very first science fiction  was Mary Shelley  writing Frankenstein  which is essentially science and horror sort of combined  but I'm wondering what about Jules Verne?  Was he before Mary Shelley or after?  He was before.  Okay, yeah, yeah. Good old, the French  they're first every time.  It's H.G. Wells? He was there.  I don't know when H.G. Wells was.  He was at lots of different times because he had this machine.  Yeah, that's right.  So anyway, very early on  science fiction started to degenerate  into horror and themes of horror  and things like that. So I thought I'd show them  some horror films.  The Day of the Triffids, The Day the Earth Stood Still  the original version, I understand there is a new one  and I married a monster from  outer space, just to give them  some sort of advice.  So these are the movies I wanted  them to see. Now, actually I  love movies and I have about a bazillion movies at home  and so I was hunting for  the movies to show the girls and I knew which ones I wanted to show  them.  And I realised I  was able to find them more easily  because how do you think  I had arranged my DVDs at home?  You didn't really arrange them.  Thermonuclearly?  Alphabetically?  Alphabetically, yeah.  I arranged them in a known order.  What's the advantage in me when I search through my  magnificently vast DVD collection?  Possibly not.  What's the advantage of me  having my DVDs in order?  Why?  Why though?  We're not going to be doing superstition in this course.  We're going to be doing science. We're going to need to know reasons  for things and evidence and facts.  Why is it faster to find it if I've got everything sorted?  You can associate it with an index  or something like a letter or something.  So why is that faster though?  Because you don't have to keep searching through  every single DVD. You just need to say  my DVD starts with the letter Z  so I just go all the way around.  So I can quickly have a rough idea about where to start  looking rather than say if I had a list starting at the beginning  scanning along I can think Z is probably  near the end of the bookshelf rather than the beginning  sort of thing. That's right.  So I thought  we could do some algorithms on these  and I've actually mucked up the ordering.  Can I have a volunteer please?  Someone who's  really, really keen to  dob in the person sitting next to them.  Put up your hand if you'd like the person  next to you to sort these DVDs into order for me.  Thank you very much.  And who's the person next to you? Oh I know you, don't I?  I did a 1917 review  but I had a motorbike accident.  I can't remember your name.  Dylan. Hello Dylan. Welcome back.  Were you nominating you or the poor person sitting next to you?  Do you know this person?  This is the attitude I like to see.  He's not afraid.  He's fearlessly going on and dobbing in a  complete stranger. You'll never sit next to him again will you?  So Dylan I actually did trick you. Would you mind  coming up here?  And sorting them into order because I just mucked up the order then.  Somehow I just sort them into order.  Now I want to tell you about  the way I sort. Yeah the. You've spotted the the problem.  It's tradition  in English that if any string begins with the  we subtract that which means them  for example we're going to classify  under M.  If you could do that.  So  if you could just put them in order that'd be cool.  Now I'm going to show you something neat that we can  do  with things when they're sorted and I thought why not  do it on DVDs.  But we're just all  just going to wait a little bit.  What if there's two the's?  No it's only the first the. The algorithm is  if the string begins  with T H E remove T H E and then  continue. So if the band was the the  as a band was once upon a time to try  and destroy indexing systems around the world  we would classify it under  the.  It's weird because a lot of them start with I  isn't it? I never realised most science fiction  yeah no leave the I in there but most science fiction movies  seem to start with I.  Space yeah ignore spaces  let's suppose we're compressing  our strings and  if it starts with a semicolon  we'll ignore all non we'll just look  at alphabetic characters  and we'll assume everything's uppercase  and we'll remove the first three letters if they're  T H E. A Playstation game  that's Sing Star Queen that would go  under S.  Yep  it's going very slowly but you're doing  very no no it's absolutely fine  Yep  awesomely good  thank you very much  absolutely perfect  oh okay  well done. Now I need ten volunteers  so one two  three four five six  seven eight nine  ten  is that okay? Okay. Can you guys come down  here  and stand out the front  thank you very much. It was Dylan?  Thanks. That's awesome. Oh well done  that's very good. Come and stand here and line up along in front  of the board. I just need this bag  it's very important  now what I'm going to do is I'm going to give each of you  oh  Dylan  Dylan  can I ask  can I ask you to help me a bit  so what we're going to do is Dylan  is going to give each of you  the DVDs just give them to them  in the right order if you can  sorry  and I'd like you  to mark your DVD  with a number  just because it's going to be hard for everyone to see the letters  from so far away to see when they're ordered  there's going to be cards here with numbers on so you'll be the lowest one  one two  if you just put it in  yeah if you can put it in order  so give him the lowest alphabetically ordered one  and if you could just insert  that in the bottom  that's brilliant  if you put it all the way up it's actually quite hard to get out  oh I know you too. What's your name?  Hello Cliff. I've forgotten your surname  very nice to see you again  hello there you go  there you go. I don't recognise you at all  thank you  oh  thank you  okay  now  I'll just move this  interrogator out of the way  we'll see if we can trap him  there we go  there we go  thank you  alright so what have we got? We've got Countess Dracula  we have The Day of the Triffids  we have The Day the Earth Stood Still  the original version  I Married a Monster from Outer Space  Invaders from Mars  Invasion of the Body Snatchers  The Invisible Man  Plan Nine from Outer Space  Them and Queen Singstar  thank you very much  now  can you just hold them up so everyone can see the number  when it's in there  can you slip it inside because we might be moving the discs around  we want it to sort of attach  so if you could slip it somehow between the plastic and the cover  yeah awesome  thank you  now I don't know if you were watching  while Dylan was doing that but I was watching him  and he did  different things both times  two times you had to sort it  but I noticed you did  different things both times  what did you do the first time? Do you remember how you sorted it?  was everyone watching what he was doing? It was very interesting  what did you do?  I was trying to say the alphabet  you were saying the alphabet but how did you arrange them?  yeah I'm not articulating it very well  and I'm picking on you now for a third time I'm sorry  so let's say your name's Dylan  I'm going to ask you  we have a problem, what's the problem?  we lost the firewire cable  we lost the firewire cable  but what's the problem in this situation?  we need to sort  the numbers  so that's the problem, sorting the DVDs  the algorithm  is the what?  how's an algorithm different to a program?  the steps it needs to do  independent of any language or particular realisation  or use of memory or anything like that  what's that?  hang on I'm going to hold the microphone up so everyone can hear what you're saying  because he's actually, his eyes lit up  you've just remembered what you did  because often, I mean all the time  when we do things, we just do them  and often we don't reflect on what we're doing  your body does clever things and your brain does clever things  but often unless we take a step back and look at it  we don't notice what we're doing  so yeah tell us, speak into the mic  sorry to be a pain  I can't hear that, can anyone hear that?  oh yeah  I think the mic's just turned way down  go  yep  so you got the first DVD from the pile, from the unsorted pile  yes  thank you very much  that's exactly what you did, thank you, well done  what he did the first time was  he pulled the DVDs out of the unsorted pile  one at a time  and he placed them into a sorted pile  and as he did  took each new one out, he inserted it  into the right spot in the sorted pile  does anyone know  what that algorithm is called?  no  insertion sort  insertion sort is, we start with unsorted data  we pick  go through the unsorted data one element at a time  and we put it into the correct spot  so far  ignoring the remaining unsorted data  so when you've only got one thing, there's only one right spot for it  it's at the beginning  then you pick the next thing up, now you've got two things  so you make a decision, does this go before that one or after that one  you make a decision by comparing them  put it down, then you pick up the third one  and you think, oh where can I put that, how many spots have you got to put the third one  three spots, so you do a couple of comparisons  best case, how many comparisons do you have to do  one comparison  the first comparison tells you it goes right at the end  or you might do another comparison  that's called insertion sort  it's a beautiful sort  it's actually what I do whenever I'm playing cards  without even thinking about it  as I pick up my cards and insert them into my hand  I'm always doing insertion sort  if anyone plays cards  but the second time  describe again what you did the second time  I tried to find the next letter  yes  so he came to the first position  what's your name?  Shogun  Shogun  that's an excellent name  he came to Shogun  and he said  instead of giving you one and then  picking the next one and working out if you guys have got to swap  he wanted to put the first one in the  exactly correct spot first time through  so he wouldn't ever have to go back to it again  so he gave it to you and he moved on  and he never came back to you again and never did any more comparisons  he did all the comparisons in his head first and gave you the right one  then he took the next smallest one and gave it  then he took the next smallest one and so on  who knows what that is called?  selection sort  that's not shell sort  but as punishment for  Jarrah  punishment for Jarrah, come down here Jarrah  we're about to do  a bubble sort  Jarrah  tell everyone the algorithm for bubble sort  you take  you go through  oh man  don't even tell us  no we'll do it  that's how we'll do it  yes  it's a series of swaps  can you guys just move into a different order  you can't look there  just pass the DVDs  jumble your DVDs  alright good  you've got two  well done  this is what we call  the sorting hat  so I'm going to put that on you  can you see anything Jarrah?  I can see perfectly  he can actually see  now I want you to ask  two people, your name is person one  your name is person two, your name is person three  four, five, six, seven, eight  nine, ten, they're not your names they're your indexes  does everyone remember their index?  alright ask some people  by index number to compare their  cards and we're going to  carry out a bubble sort  do you mind standing there with a hat on?  it's ok, you don't look silly  there's a mic  Jarrah I've got a mic, hold it up  there you go, have you got it?  that's right, it's a tiny little one  if you hold that inside  the reason I've got him blindfolded is  I want you to see an algorithm  is something that's carried out completely mindlessly  as human beings if we look  at what we're doing our brain makes little  shortcuts and we just think oh I can skip that step  because of that, but because Jarrah now  has no notion of the data  he's oblivious to the way the data is actually sorted  he will give us a precise execution  of the algorithm  you can ask say for example  index one is your card bigger or smaller than  index three  no, no, no  you're always index one  am I sorting in ascending?  don't mind  might as well make it ascending  index two  is your card bigger or smaller than  index three  no it's not bigger  oh I like it, well done  that's very good  we can't say is it smaller or bigger  because if we say smaller or bigger  what else do we have to allow for?  equals, in this case we've got data without repetition  so it's irrelevant, but computers can't do three way  comparisons, so yeah, is it bigger?  we can only ask yes no questions  index three is your card  is your card bigger than index four  can you swap with index four  that's right, just swap  well done, excellent  index two, are you bigger than index three  bubble sort  so you've got to keep going  keep going all the way to the end  your dad said  can you pay, I'll give you 100 bucks  if you get my son to sit down on the floor  with 200 people looking at him with a bag on his head  and just whenever he says something say it's wrong  so man I owe you big time  but you're doing absolutely fine, but don't forget  bubble sort keeps going the whole way along  I feel like I'm back in undergrad  index four  are you bigger than index five  can you swap  well done  index five, are you bigger than index six  no  good, stay that way  are you bigger than index seven  yes  swap  index seven, are you bigger than index eight  no  index eight, are you bigger than index nine  yes  swap  index, how many are there  ten  nine, ten, bigger  swap  well done  he's thinking hard  by the way the prac exam is  can everyone bring a Woolworths bag  you're doing very well Jarrah  are you ready to keep going with the next round  do I just start from one again  no, you could  I think I was up to three  it's a bubble sort, it's oblivious  one, are you bigger than two  no  two, are you bigger than three  swap  three, are you bigger than four  four, are you bigger than five  no  good, five, are you bigger than six  swap  six, are you bigger than seven  good, seven, are you bigger than eight  swap  eight, are you bigger than nine  swap  nine, are you bigger than ten  good, you're bigger than two  two, are you bigger than three  sorry  go  Oh, hang on, do you have to do any more comparisons now?  I don't remember.  Notice that, as a result of the first pass-through, Jarrah successfully put the biggest one in the end position.  So he never has to do a comparison with the end one ever again.  He'll still be doing it anyway, because he's not going to be able to figure out...  No, no, you will always...  The biggest one will be in position 10 after the first pass-through.  Thank you.  After the first pass-through, you are guaranteed that the biggest one is now in the correct spot.  But everyone else, who knows? They've all jumbled up a bit.  After the second pass, which you did successfully, that's already in the right spot.  So now on your third pass-through, once you get to the third last position, you don't need to keep going.  And I think we can do one more round and then maybe stop.  Why are you bigger than 2?  Yes.  What?  Swap.  When did you do that?  2, bigger than 3?  No.  3, bigger than 4?  No.  4, bigger than 5?  No.  5, bigger than 6?  No.  6, bigger than 7?  Yep.  Swap.  7, bigger than 8?  No, you're done now.  Thank you.  Can everyone give Jarrah a big hand?  Jarrah, look at the data.  You've got it completely sorted now, except there's only one who's out of order, which is the original version.  Notice each pass from now on, that's just going to move down one.  Can you see that?  What did we do?  We did a bubble sort.  Can you hear?  Oh no, I had fly spray in here.  It's supposed to have neurological effects.  Can you hear?  Can everyone give Jarrah another hand?  Guys, just stay there one second.  That was the most humiliating thing I've ever done to anyone before.  I'm very sorry.  And you did that magnificently well.  Notice now, it's still going to take us...  Oh, I can hear something now.  It's still going to take us a couple more passes, because in each pass, this 4 is just going to move down one.  All the other numbers got into position quite quickly, except the 4.  By the way, do you remember at the beginning when we jumbled up the numbers?  Who had the 4?  No, who took the 4 and jumbled it up?  I did.  Everyone else jumbled locally with their neighbours.  A bubble sort creates local order really quite quickly.  I wanted to have one that's way out of whack, so I took 4 right up to the end.  That's going to take that many passes to get it down to this end.  Thank you very much, everyone.  Can we give them all a hand, because you did magnificently well.  Thank you.  We'll take a break now.  I'll try and fix up this fire alarm.  We'll meet again in 10 minutes' time.  Thank you very much.  Thank you, everyone. 