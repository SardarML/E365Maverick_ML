 Every day, we generate 2.5 quintillion bytes of data.  And that's the equivalent of every person in the world  filling up an entire Excel file with data every day.  And that's where SQL comes in.  Developers use this tool to store a lot of the data  that we're generating.  And then data analysts, data scientists,  and even data engineers go in and use SQL  in order to access and analyze this data.  So let's dive in today to better understand  how I use SQL for my job as a data analyst,  what is SQL and its importance  in working with other data science tools,  what are the most popular SQL options,  and by the end, we'll even have you up and running  with some basic SQL queries.  What up, data nerds?  I'm Luke, a data analyst,  and my channel's all about tech and skills for data science.  And without a doubt, SQL is the most important tool  by those that work in the field of data science.  What better way to show this  than by sharing how I use SQL in my job?  And I find that it's used in two main ways.  First is ad hoc analysis, and the second is data sharing.  Ad hoc analysis of business data  is typically performed to answer one-off questions.  For example, let's say my coworker comes up to me  and asks the following,  hey, what were sales last quarter?  From here, I can use SQL to dive into the data  and investigate further.  Since I don't need to do any fancy reporting,  SQL will be fine for this.  Now, if my coworker comes back and says this,  hey, sales were really low last quarter.  Can you look into why this is?  Now, I could potentially stay in SQL  and do this type of analysis,  but I found I'm actually more comfortable  using programming languages for this.  So I could use something like Python or R  to dive further and investigate the data.  So moving on to that second aspect of data sharing.  What happens now whenever you have a stakeholder  that wants to dive into the data themselves?  I do expect data nerds to have the skill of SQL,  but non-data nerds, I don't expect this as much.  So you may have questions like this.  Hey, bro, can I get those sales numbers, but in Excel?  In this case, I could use a spreadsheet software  such as Excel to connect directly to a database  with some sort of SQL code  and thus have a live connection to the data  within the spreadsheet.  What happens if they come back again,  hopefully the final time, and ask the following?  Bro, your sales analysis was spot on.  Do you mind building a dashboard for the entire sales team  so that way everybody can monitor this?  Once again, SQL can be used in visualization tools  such as Power BI and Tableau to pull the data real time  and display it in a dashboard for my coworkers to admire.  And this is why SQL is, in my opinion,  the most powerful tool to know as a data analyst.  Not only can I use this to access and analyze data,  I can take it a step further  and put it into other data analytical tools  to thus extract the data and provide it to my stakeholders.  So now let's dive deeper into understanding  what SQL actually is.  And this stands for Structured Query Language.  And it's most commonly pronounced SQL.  SQL.  SQL.  SQL.  SQL.  SQL.  SQL.  SQL is the language used to query a database.  Basically think of it like a common language  between your computer and a database.  So I frequently get asked,  how do I install SQL on my computer?  Now, just to be clear, SQL is a language  so you don't necessarily install SQL on your computer.  Instead I find that there's two main things  that you need to run SQL.  One is an editor and two is a database.  Let's talk about database first.  Databases are an organized collection of data.  So large companies use these databases  in order to store their vast amounts of information.  Typically programmers and even data engineers  are utilized in order to build systems  around collecting this data.  Since we're talking about large amounts of information,  we typically don't want to use things like text files  or Excel files because they have  pretty small data limitations.  Databases have much larger data limitations.  So once these databases are designed and set up  by these programmers and data engineers,  as a data analyst I can then go in  and use SQL in order to query these databases.  Now the structure of the language or syntax  of SQL to query a database is actually quite simple.  So let's say YouTube has a database full of information.  Inside this database there are different tables  for every YouTube channel  that include their list of subscribers.  We'll say there's a table in there for this channel  and it's titled Data Nerd Channel  with an entry for each subscriber of my channel.  Each one of those rows in the table  has information like name, channel ID,  and the number of comments they've given.  Now I want to get a list of all my subscribers.  I then can use the following syntax  which has a SELECT statement and a FROM statement.  So SELECT is used to identify the column of interest  that we want to grab and FROM is used to identify  the table we want to connect to.  When I send this query to the database,  it then will provide me back a list of all my subscribers.  Now SQL can be used in a lot more different ways.  For example, we can actually use it to go in further  and analyze the data, such in this case  where we can add on a WHERE statement  to filter our data further based on  how many users commented more than 100 times.  We can also use SQL to insert  or store more information in a database.  For this, we can identify the table  and columns we want to insert into  and then provide the values to insert into this table.  Once I run this, the table will be updated.  And then finally, we can use SQL to update record entries.  For this, let's say we have a new comment  on one of my videos.  Once again, we can identify the table we want to update,  the column we want to set a new value for,  and then a WHERE statement to select  what to filter on for that entry.  Once I run this, the table will be updated.  So now we understand how to query a database  and generally what a database is,  but what database do you use?  Well, Stack Overflow conducted a survey last year  that asked respondents about what software tools  they used for their job.  When we look at the most popular database options,  we can see that there are a plethora  of options to choose from.  To make things a little complicated,  there's actually two types of databases on this survey.  There are relational databases, so SQL databases,  and non-relational databases, or NoSQL databases.  I'd focus on the relational databases  as they typically store data in a tabular form,  which is more common for our job.  But what about those NoSQL databases?  So NoSQL actually stands for Not Only SQL,  meaning that you can not only store this data  in a tabular form, it also has a manner  for you to store it in an unstructured manner,  which is actually more efficient  at handling very large amounts of data.  So for aspiring data analysts,  I think it's more important that you're aware of this.  That way, while you progress in your career,  you may potentially become in contact with these  and then you can learn about it then.  So then what relational database should you learn or use?  Well, quite honestly, I don't think it matters  as all of these relational databases  use the same SQL syntax  and you can transfer your skills between them.  But interesting enough, the most popular options  on that Stack Overflow list are also free and open source.  So I would say start with any one of these.  Personally, I use Postgres and also SQLite  for all my consulting projects.  The other options are closed source and not always free,  although they are very popular,  especially they're being used in large corporations.  Of these options, I've used primarily SQL Server  for all of my work projects.  This is also great because this choice  has a free option available.  Having worked with a lot of these different databases,  I can say it's with pretty relative ease  that you can switch between them.  The hardest part is learning the basics  of the syntax for SQL.  So all of this actually directly relates  to the sponsor of this video, Coursera.  My favorite training for this on Coursera  is the SQL for Data Science specialization,  which is perfect for those that have no prior experience  with coding that want to master SQL.  I even think it's great for those that have already obtained  maybe the Google Data Analytics certificate  because now that you have these basics of SQL,  you can use this specialization to dive further into it.  The course focuses on SQLite,  and what I like about the platform that Coursera provides  is that they get you up and running  with the same tools they'll be using in real life  without having to install any software.  For example, I use VS Code for all my coding  in both Python and SQL.  I also like how the specializations have a capstone project.  So you can then take all those skills  that you've learned over the courses  and apply them into a final deliverable,  which you then can use to showcase  on your resume as experience.  So thanks again to Coursera for sponsoring this video.  So we talked about already SQL syntax,  also about databases themselves,  but where do we keep these databases  that we're trying to query?  Well, the first option is that you can keep the database  locally running on your computer.  And this is a great option,  especially if you're learning or you're new to SQL,  it very much simplifies things.  Now, sometimes I'm even doing data analytic projects  that need access to a remote database.  And sometimes the owners don't want you to have access to it.  So in that case, I can download a copy of that database  and have it running locally on my computer.  I do this most frequently with Postgres databases.  So because of this,  I have the Postgres application installed on my computer  so I can run these databases locally.  This will be the same for any other popular database.  Now running a database locally on a computer  is great option if you're the only person accessing it.  Once you get into other people accessing it,  you need to look at other options.  So the two popular options for this  are some sort of server or a cloud provider.  For the server option,  many large companies have their own  where they like to store their own data.  Typically your IT department will handle installing  and setting up all the dependencies for the database  and then grant you access.  This option is called on-prem.  Now, another popular option  is to use a cloud provider instead.  Looking back at the Stack Overflow poll,  the most popular options are from Amazon, Google,  Microsoft, and even Heroku.  Personally, I've used Google Cloud Platform in the past,  but many other options are just as good, especially AWS.  Now, as an entry-level data analyst,  I don't think you need to learn or master cloud providers.  Instead, what I've seen is typically data engineers  or even data scientists are the ones setting up databases  inside of some sort of cloud provider.  However, it is important to know  that these cloud providers provide some sort of interface  for you to run SQL queries for your databases.  As an example, in the Google Data Analytics Certificate,  students use BigQuery inside of the Google Cloud Platform  to run their SQL queries.  And this actually leads into the next area  of where you should be writing and running  your SQL queries.  Well, you could use a cloud platform  in order to run your SQLs on those database in the cloud.  But what happens if you have a different environment  or your database isn't in the cloud?  All the major relational databases  actually have their own editors for them.  I've used Postgres before,  and for this, I've used their SQL management software  of PG Admin.  MySQL also has a similar software called MySQL Workbench  to run their databases.  And then for my work with SQL Server,  I've even used Microsoft's SQL Server Management Studio.  One note is that this tool is specifically  only available for Windows users.  But what happens if you're like me  and you're always switching between different databases?  For this, I like to use VS Code.  VS Code has many free extensions  in order to support your database of choice.  I'm currently checking out this extension called MySQL,  which contrary to its name,  actually supports a lot of the different popular databases.  Another popular option to check out is dBeaver.  So I haven't used this one personally,  but it does seem like a good option  as recommended by other data analysts.  Just like VS Code, it's free  and supports a variety of different databases.  Now there is one option that I don't suggest learning  for those new to data analytics,  and that is Microsoft Access.  It's sort of a weird in-between of a relational database  and also a graphical user interface  that you can build apps.  We used this app while I was in the Navy  in order to store our data.  And the data nerds that worked with this  were not really a fan of it.  Now the reason why I'm recommending  not learning this as a new data analyst  is because I feel Microsoft is actually signaling  that they're gonna be shutting this product down.  So sorry to anyone that uses this product currently,  but personally, I feel Microsoft  has way better options available  in order to solve these types of problems.  So getting back into a real world example  of how I use SQL in my job as a data analyst.  So for one of my projects,  we needed to investigate the suppliers  that we received a lot of our goods from  for the company I worked for at the time.  The problem is that the data was spread out  across many tables within our database  and required extensive cleaning.  This was a large set of data,  so a teammate and I worked together  in order to build a SQL query  to comply in all these different tables that we needed  and clean up the data.  This portion of the project  ended up taking a few weeks for us  to actually develop these few hundred lines of SQL  in order to query this data.  Now that we had this cleaned up data set,  my boss now was like,  hey, I need this data set in a more presentable form  so that way my teammates can use it  and also her boss could access it.  So that's where something like Power BI comes in.  In this case, I can use the tool within it of Power Query,  which is also in Excel,  to actually go in and execute the SQL code we had written.  And this is actually pretty neat  because this allows the Power BI dashboard  that we're gonna build  in order to be connected real time to the data source.  From here, I developed an end-to-end solution  that allowed the stakeholders to now go to a dashboard  and access the data that they were curious about.  Now to be clear,  this SQL query functionality is not specific  just to Power BI.  Other popular tools like Tableau and Google Data Studio  also have this functionality.  Now, not related to this project,  but I've also used other tools  such as programming languages  to utilize SQL as well.  So as I've mentioned before,  I'm a big fan of Python.  And I would say actually I'm more comfortable with Python  than I am SQL.  So a lot of times I like to get the data  and then import it or collect it with Python.  And then from there,  use Python's tools and libraries  such as Pandas to clean up the data,  maybe matplotlib to plot it,  and even maybe something like sklearn  to perform some regression analysis.  Now all these things with Python,  you can also do with other popular languages  such as R also.  So I share all these examples,  not for you to think that you have to learn  all these different tools,  but instead I want you to understand the power of SQL.  It's such a powerful language  and has such a powerful use  that other tools are taking advantage of it.  Because of this,  I feel that SQL is the most powerful tool  to learn as a data analyst.  As always, if you got value out of this video,  smash that like button.  And with that, I'll see you in the next one.  Oh wait, we got a package to unwrap.  I'll be right back.  I just got a package from two of my top subscribers.  Open the bigger box first.  Okay, so I gotta open the bigger box first.  Oh my goodness, what is this?  Oh my gosh, why am I recording this?  Okay, so let's, all right.  Uh, this is a little bit obscene.  This looks like a movie poster  for data scientists, first data analyst.  Postcards to go along with the movie poster as well.  So awesome, thank you Dave.  And also thank you Alex for this.  This was awesome.  And it has this quote,  in order to trap him, he must become him.  I don't even know what that means. 