 Databases are a critical part of an application.  But the big question that arises all the time  is, how do you pick a database?  Which database makes sense for your use case?  What are the different types of databases?  Well, stay with me in this video because I  will answer most of those questions  and give you a framework to pick a database for your use case.  Now, real quick, what is a database?  It's really a place to store your data  so that the application can easily access it when needed.  Now, there are two broad categories  of databases to choose from.  There's relational databases, which are also  called SQL databases.  And then there is non-relational category,  which is also referred to as NoSQL databases.  Now, in relational databases, the information  is stored in tables, in rows and columns.  And they can talk to each other through specific keys.  They're connected to each other.  And because of this fixed structure,  it's typically used for data that does not change very often  because you need to decide this schema.  And the data can just be added in the same schema over time.  But you can't really change the schema very often.  Now, SQL, or Structured Query Language,  is typically used for interacting with this database.  So you would, say, select all users  that purchased this product under this promo.  Now, relational databases offer ACID consistency model.  What that means is it's atomic, consistent, isolated,  and durable.  What does that mean?  By atomic, it means all operations in a transaction  succeed or every operation has to roll back.  We'll see a little bit more with an example.  Now, consistent means on the completion of a transaction,  the database is structurally sound.  Now, isolated means that the transactions are not  competing or contending with one another,  and the transactions appear to run sequentially.  And durable means that the result  of applying a transaction are permanent,  even in the presence of a failure.  Now, because of these properties,  relational databases are used in applications  that require high accuracy and for transactional queries that  require consistency, such as financial and retail  transactions.  Now, think about an example.  In banking, when a customer makes a fund transfer request,  you want to make sure that the transaction is possible,  that there's actually funds in the bank account,  and it actually happens on the latest, most up-to-date data,  which is the account balance.  In this case, an error and resubmitting of that request  is sometimes fine, but a wrong transaction is not fine.  So that's what we mean by consistency.  Now, in Google Cloud, there are two databases  that fall into the relational category.  There is Cloud SQL and Cloud Spanner.  For more details on each of these,  I'm going to put the documentation links below.  But broadly speaking, if you have  a large amount of relational data,  more than, say, 10 terabytes or so,  and you need global scale and global consistency,  you're going to pick Spanner.  But for any other general purpose relational database  requirements, Cloud SQL should suffice.  Now, non-relational databases or NoSQL databases  store complex, unstructured data.  Now, in relational databases, as we saw,  this is more structured data.  You know what you're storing, and you  know how it's organized.  In non-relational, here, it's not really tabular in nature.  You can store data in different formats.  It could be a document format.  It could be key-value pairs.  It could be graph, which is data connected to one another.  It could be data in memory, so like cache.  And it could also be data in wide columns.  Now, non-relational databases are often  used when you have large quantity of data,  so large data sizes.  Complex in nature, diverse data, and it needs to be organized.  Now, unlike relational databases,  the non-relational databases are faster  in delivering the query response.  And that's because they don't have to join the tables  or look through the entire data set to give you the answer.  They can just look through that portion of the document  and respond back quickly to the query.  And this makes them ideal for storing data  that may change frequently or for applications that  handle many different kinds of data.  Now, let's consider an example.  You might have an apparel store, which  has a database of all the shirts that you are selling.  Now, the shirts could be categorized,  and you're saving the shirt data with the size, the brand,  the color.  And you want to have room for additional parameters  to add later, such as, say, sleeve size or collars  and et cetera.  Now, if you saved this data in a relational database,  it's a lot of work to expand those columns.  But in a non-relational database,  you can just add new parameters or new key value  pairs to that data set that already exists.  Now, a little more on how NoSQL databases are actually faster.  Now, the first thing is they follow  what is called as basic structure, meaning  basically available, soft state, and eventual consistency.  Now, this really means is that it's basically available,  meaning it's considered to be available all the time.  And availability is more important.  Soft state means it doesn't have to be write consistent.  And eventual consistency really means that at some later time,  you can assume that the database will be fully consistent.  But in every current moment, it's  more important for it to be available  than to be consistent.  Now, because of these properties,  non-relational databases are really  used when you require reliability, availability,  and your data changes can be frequent.  Because here, you can't really change the schema of the data  very often.  And they can scale very easily horizontally.  What that means is you can add machines to scale  the database horizontally, while here, the scaling  has to really be by changing the size of the machine.  So this scales vertically.  And in non-relational databases, you can scale horizontally,  which also means that distributed relational  databases are harder to manage, while distributed unstructured  databases are easier and better to manage.  Now, as we saw here, choosing a relational or non-relational  database largely depends on your use case.  Broadly, if your application requires ACID transactions  and your data is not going to change much,  select relational databases.  If your data may change later and if the scale  and availability is a much bigger requirement  than consistency, then non-relational databases  are a preferred choice.  Also, you could say that if you're  dealing with transactional data use cases,  then online transactional processing use cases  are usually handled in relational databases,  while the analytics processing use cases are usually  handled in non-relational databases.  Although, for processing, you also  have to deal with a whole different set of tools,  such as data warehousing and data management  and processing, which I'll cover in a separate episode  because it's not about databases.  It's more about the pipelines and how you analyze data.  Now, when it comes to Google Cloud  in non-relational databases, you have multiple options.  So in-memory database, you have Memory Store.  For graph database, you can use Genys Graph with Bigtable.  For key value store, you can use Bigtable.  For document store, you can use Firestore.  And for right column, again, Bigtable.  Now, this should give you a broad overview  of the difference between relational  and non-relational databases and even the options within them.  When you are going to make that final decision,  I do recommend that you dive deeper  into that specific database a bit more  and understand any other nuances that  might be specific or relevant to your use case.  If you like this video, give it a like  and let me know what your thoughts are  in the comments below so I can cover the topics that  can help you the most.  Thank you.  Bye. 